<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="_se_s_t_l_allocate_8h" kind="file">
    <compoundname>SeSTLAllocate.h</compoundname>
    <includes local="no">memory.h</includes>
    <includes local="no">EsShare.h</includes>
    <includedby refid="_se_pure_race_unit_define_8h" local="yes">F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SePureRaceUnitDefine.h</includedby>
    <incdepgraph>
      <node id="109135">
        <label>memory.h</label>
      </node>
      <node id="109134">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SeSTLAllocate.h</label>
        <link refid="SeSTLAllocate.h"/>
        <childnode refid="109135" relation="include">
        </childnode>
        <childnode refid="109136" relation="include">
        </childnode>
      </node>
      <node id="109136">
        <label>EsShare.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="109141">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SePureRaceStream.cpp</label>
        <link refid="_se_pure_race_stream_8cpp"/>
      </node>
      <node id="109142">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SeRaceRecord.cpp</label>
        <link refid="_se_race_record_8cpp"/>
      </node>
      <node id="109138">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SePureRaceUnitDefine.h</label>
        <link refid="_se_pure_race_unit_define_8h"/>
        <childnode refid="109139" relation="include">
        </childnode>
      </node>
      <node id="109137">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SeSTLAllocate.h</label>
        <link refid="SeSTLAllocate.h"/>
        <childnode refid="109138" relation="include">
        </childnode>
      </node>
      <node id="109139">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SeShareUnitData.h</label>
        <link refid="_se_share_unit_data_8h"/>
        <childnode refid="109140" relation="include">
        </childnode>
      </node>
      <node id="109140">
        <label>F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SePureRaceStream.h</label>
        <link refid="_se_pure_race_stream_8h"/>
        <childnode refid="109141" relation="include">
        </childnode>
        <childnode refid="109142" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_se_s_t_l_allocate" prot="public">SeSTLAllocate</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EsShare.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//重载STL的内存管理，使用EsShare的内存池<sp/><sp/><sp/><sp/><sp/>--向延军</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_VISION_IOS</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointer;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_type;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_VISION_ANDROID)</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pointer;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_type;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="18" refid="class_se_s_t_l_allocate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::allocator&lt;T&gt;<sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/><sp/></highlight></codeline>
<codeline lineno="21" refid="class_se_s_t_l_allocate_1a22968c59d7573584322a0bdf3f43aec6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::allocator&lt;T&gt;<sp/><ref refid="class_se_s_t_l_allocate_1a22968c59d7573584322a0bdf3f43aec6" kindref="member">base_type</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined<sp/><sp/>_WIN32<sp/>)</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>必须要重新定义<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Other&gt;<sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rebind<sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;Other&gt;</ref><sp/>other;<sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>内存的分配与释放可以实现为自定义的算法</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>allocate(size_type<sp/>count)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T*)Es::Pool_AllocBytes(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>count);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate(pointer<sp/>ptr,<sp/>size_type<sp/>count)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::Pool_DeallocBytes((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)ptr);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined<sp/>_VISION_ANDROID)</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>构造函数</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_se_s_t_l_allocate_1afc84c65ca078ecd86a891b615f306393" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_se_s_t_l_allocate_1afc84c65ca078ecd86a891b615f306393" kindref="member">SeSTLAllocate</ref>()<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_se_s_t_l_allocate_1aa27fa0ee1184bd993ee5a92a68066de3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_se_s_t_l_allocate_1aa27fa0ee1184bd993ee5a92a68066de3" kindref="member">SeSTLAllocate</ref>(<ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_se_s_t_l_allocate_1a35b01295ec259eef230557d02fb54fba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;T&gt;</ref>&amp;<sp/><ref refid="class_se_s_t_l_allocate_1a35b01295ec259eef230557d02fb54fba" kindref="member">operator=</ref>(<ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Other&gt;<sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="class_se_s_t_l_allocate_1a1e7266ecfe974bc3fb9492050bd23250" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_se_s_t_l_allocate_1a1e7266ecfe974bc3fb9492050bd23250" kindref="member">SeSTLAllocate</ref>(<ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;Other&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Other&gt;<sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="class_se_s_t_l_allocate_1aa6220930ec1f79103e464d72b42a26f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;T&gt;</ref>&amp;<sp/><ref refid="class_se_s_t_l_allocate_1aa6220930ec1f79103e464d72b42a26f1" kindref="member">operator=</ref>(<ref refid="class_se_s_t_l_allocate" kindref="compound">SeSTLAllocate&lt;Other&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="F:/TeamWork/ServerVersion/projects/server/Share/CommonShare/SeSTLAllocate.h"/>
  </compounddef>
</doxygen>
