<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="class_performance_timing_1_1_c_counter" kind="class" prot="public">
    <compoundname>PerformanceTiming::CCounter</compoundname>
    <basecompoundref refid="class_performance_timing_1_1_c_performance_stat" prot="public" virt="non-virtual">PerformanceTiming::CPerformanceStat</basecompoundref>
    <basecompoundref refid="class_i_counter" prot="public" virt="non-virtual">ICounter</basecompoundref>
    <basecompoundref refid="class_performance_timing_1_1_c_performance_stat" prot="public" virt="non-virtual">PerformanceTiming::CPerformanceStat</basecompoundref>
    <basecompoundref refid="class_i_counter" prot="public" virt="non-virtual">ICounter</basecompoundref>
    <derivedcompoundref refid="class_performance_timing_1_1_c_history_counter" prot="public" virt="non-virtual">PerformanceTiming::CHistoryCounter</derivedcompoundref>
    <derivedcompoundref refid="class_performance_timing_1_1_c_history_counter" prot="public" virt="non-virtual">PerformanceTiming::CHistoryCounter</derivedcompoundref>
    <includes refid="src_2_performance_timing_8h" local="no">PerformanceTiming.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" prot="protected" static="no" mutable="no">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::m_uValue</definition>
        <argsstring></argsstring>
        <name>m_uValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="486" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="486" bodyend="-1"/>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" compoundref="src_2_performance_timing_8h" startline="428" endline="432">Add</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" compoundref="src_2_performance_timing_8h" startline="514" endline="524">PerformanceTiming::CHistoryCounter::AdvanceFrame</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" compoundref="src_2_performance_timing_8h" startline="440" endline="444">Decrement</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" compoundref="src_2_performance_timing_8h" startline="451" endline="454">GetValue</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" compoundref="src_2_performance_timing_8h" startline="434" endline="438">Increment</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" compoundref="src_2_performance_timing_8h" startline="446" endline="449">Reset</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" compoundref="src_2_performance_timing_8h" startline="422" endline="426">SetValue</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" prot="protected" static="no" mutable="no">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::m_uiFlags</definition>
        <argsstring></argsstring>
        <name>m_uiFlags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="487" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="487" bodyend="-1"/>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" compoundref="src_2_performance_timing_8h" startline="417" endline="420">CheckFlag</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" compoundref="src_2_performance_timing_8h" startline="478" endline="481">HasFlagsSet</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_performance_timing_1_1_c_counter_1acc2b75761dbd842c4f4a0f64ad06ef49" prot="protected" static="no" mutable="no">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::m_uWarningThreshold</definition>
        <argsstring></argsstring>
        <name>m_uWarningThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="488" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="488" bodyend="-1"/>
        <referencedby refid="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" compoundref="src_2_performance_timing_8h" startline="456" endline="459">GetWarningThresholdMS</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_performance_timing_1_1_c_counter_1a78559dbdd3753e77daa793fb820f623d" prot="protected" static="no" mutable="no">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::m_uCriticalThreshold</definition>
        <argsstring></argsstring>
        <name>m_uCriticalThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="489" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="489" bodyend="-1"/>
        <referencedby refid="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" compoundref="src_2_performance_timing_8h" startline="461" endline="464">GetCriticalThresholdMS</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerformanceTiming::CCounter::CCounter</definition>
        <argsstring>(const std::string &amp;sName, UInt32 uiFlags, UInt32 uWarning=0, UInt32 uCritical=0)</argsstring>
        <name>CCounter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sName</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uWarning</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uCritical</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="403" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="403" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void PerformanceTiming::CCounter::HardReset</definition>
        <argsstring>()</argsstring>
        <name>HardReset</name>
        <reimplements refid="class_performance_timing_1_1_c_performance_stat_1ac49696dfa0ed2caeb759cfd45071f11f">HardReset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="411" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="411" bodyend="415"/>
        <references refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" compoundref="src_2_performance_timing_8h" startline="446" endline="449">Reset</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" compoundref="src_2_performance_timing_8h" startline="382" endline="385">PerformanceTiming::CPerformanceStat::ResetTouch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::CheckFlag</definition>
        <argsstring>(UInt32 uFlag) const </argsstring>
        <name>CheckFlag</name>
        <param>
          <type>UInt32</type>
          <declname>uFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="417" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="417" bodyend="420"/>
        <references refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" compoundref="src_2_performance_timing_8h" startline="487">m_uiFlags</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::SetValue</definition>
        <argsstring>(UInt32 uiNewValue)</argsstring>
        <name>SetValue</name>
        <reimplements refid="class_i_counter_1a06a3c408af964e85cf97d3d2ee4fd03e">SetValue</reimplements>
        <param>
          <type>UInt32</type>
          <declname>uiNewValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="422" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="422" bodyend="426"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Add</definition>
        <argsstring>(Int32 uiIncrement)</argsstring>
        <name>Add</name>
        <reimplements refid="class_i_counter_1acec69d4ae4af4a1c865d8ac7134780d1">Add</reimplements>
        <param>
          <type>Int32</type>
          <declname>uiIncrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="428" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="428" bodyend="432"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Increment</definition>
        <argsstring>()</argsstring>
        <name>Increment</name>
        <reimplements refid="class_i_counter_1a3060839cf58592ce26148863fc9789be">Increment</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="434" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="434" bodyend="438"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Decrement</definition>
        <argsstring>()</argsstring>
        <name>Decrement</name>
        <reimplements refid="class_i_counter_1a96b450405e2dddc5e8cd464b4fc598b3">Decrement</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="440" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="440" bodyend="444"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <reimplements refid="class_i_counter_1ab54127ddfec6e83d097205b506082372">Reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="446" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="446" bodyend="449"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <referencedby refid="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" compoundref="src_2_performance_timing_8h" startline="411" endline="415">HardReset</referencedby>
        <referencedby refid="class_c_performance_timing_1ab14acbc8b35a8e68fbe8d6dcd60929f9" compoundref="src_2_performance_timing_8cpp" startline="543" endline="551">CPerformanceTiming::ResetCounters</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetValue</definition>
        <argsstring>() const </argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="451" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="451" bodyend="454"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <referencedby refid="class_c_performance_timing_1a5bfd75b3a3c3933063244609888e2dfc" compoundref="src_2_performance_timing_8cpp" startline="677" endline="710">CPerformanceTiming::EnumerateAllCounters</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetWarningThresholdMS</definition>
        <argsstring>() const </argsstring>
        <name>GetWarningThresholdMS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="456" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="456" bodyend="459"/>
        <references refid="class_performance_timing_1_1_c_counter_1acc2b75761dbd842c4f4a0f64ad06ef49" compoundref="src_2_performance_timing_8h" startline="488">m_uWarningThreshold</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetCriticalThresholdMS</definition>
        <argsstring>() const </argsstring>
        <name>GetCriticalThresholdMS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="461" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="461" bodyend="464"/>
        <references refid="class_performance_timing_1_1_c_counter_1a78559dbdd3753e77daa793fb820f623d" compoundref="src_2_performance_timing_8h" startline="489">m_uCriticalThreshold</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_i_counter" kindref="compound">ICounter</ref> *</type>
        <definition>ICounter* PerformanceTiming::CCounter::SetFolderName</definition>
        <argsstring>(const char *szFolderName)</argsstring>
        <name>SetFolderName</name>
        <reimplements refid="class_i_counter_1a514686e8a4cdea17447ec0eb1910cf7e">SetFolderName</reimplements>
        <param>
          <type>const char *</type>
          <declname>szFolderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="466" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="466" bodyend="470"/>
        <references refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" compoundref="src_2_performance_timing_8cpp" startline="759" endline="767">PerformanceTiming::CPerformanceStat::DoSetFolderName</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_i_counter" kindref="compound">ICounter</ref> *</type>
        <definition>virtual ICounter* PerformanceTiming::CCounter::SetFolderName</definition>
        <argsstring>(int iFolderFlag)</argsstring>
        <name>SetFolderName</name>
        <reimplements refid="class_i_counter_1a80e3de177ab8118cbf3c515915a3e830">SetFolderName</reimplements>
        <param>
          <type>int</type>
          <declname>iFolderFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="472" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="472" bodyend="476"/>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" compoundref="src_2_performance_timing_8cpp" startline="769" endline="786">PerformanceTiming::CPerformanceStat::DoSetFolderFlag</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PerformanceTiming::CCounter::HasFlagsSet</definition>
        <argsstring>(UInt32 uiFlags) const </argsstring>
        <name>HasFlagsSet</name>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="478" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="478" bodyend="481"/>
        <references refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" compoundref="src_2_performance_timing_8h" startline="487">m_uiFlags</references>
        <referencedby refid="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" compoundref="src_2_performance_timing_8h" startline="514" endline="524">PerformanceTiming::CHistoryCounter::AdvanceFrame</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PerformanceTiming::CCounter::IsHistoryCounter</definition>
        <argsstring>() const </argsstring>
        <name>IsHistoryCounter</name>
        <reimplementedby refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8">IsHistoryCounter</reimplementedby>
        <reimplementedby refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8">IsHistoryCounter</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="483" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerformanceTiming::CCounter::CCounter</definition>
        <argsstring>(const std::string &amp;sName, UInt32 uiFlags, UInt32 uWarning=0, UInt32 uCritical=0)</argsstring>
        <name>CCounter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sName</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uWarning</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uCritical</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="403" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="403" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void PerformanceTiming::CCounter::HardReset</definition>
        <argsstring>()</argsstring>
        <name>HardReset</name>
        <reimplements refid="class_performance_timing_1_1_c_performance_stat_1ac49696dfa0ed2caeb759cfd45071f11f">HardReset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="411" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="411" bodyend="415"/>
        <references refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" compoundref="src_2_performance_timing_8h" startline="446" endline="449">Reset</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" compoundref="src_2_performance_timing_8h" startline="382" endline="385">PerformanceTiming::CPerformanceStat::ResetTouch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 PerformanceTiming::CCounter::CheckFlag</definition>
        <argsstring>(UInt32 uFlag) const </argsstring>
        <name>CheckFlag</name>
        <param>
          <type>UInt32</type>
          <declname>uFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="417" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="417" bodyend="420"/>
        <references refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" compoundref="src_2_performance_timing_8h" startline="487">m_uiFlags</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::SetValue</definition>
        <argsstring>(UInt32 uiNewValue)</argsstring>
        <name>SetValue</name>
        <reimplements refid="class_i_counter_1a06a3c408af964e85cf97d3d2ee4fd03e">SetValue</reimplements>
        <param>
          <type>UInt32</type>
          <declname>uiNewValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="422" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="422" bodyend="426"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Add</definition>
        <argsstring>(Int32 uiIncrement)</argsstring>
        <name>Add</name>
        <reimplements refid="class_i_counter_1acec69d4ae4af4a1c865d8ac7134780d1">Add</reimplements>
        <param>
          <type>Int32</type>
          <declname>uiIncrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="428" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="428" bodyend="432"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Increment</definition>
        <argsstring>()</argsstring>
        <name>Increment</name>
        <reimplements refid="class_i_counter_1a3060839cf58592ce26148863fc9789be">Increment</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="434" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="434" bodyend="438"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Decrement</definition>
        <argsstring>()</argsstring>
        <name>Decrement</name>
        <reimplements refid="class_i_counter_1a96b450405e2dddc5e8cd464b4fc598b3">Decrement</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="440" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="440" bodyend="444"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" compoundref="src_2_performance_timing_8h" startline="378" endline="381">PerformanceTiming::CPerformanceStat::Touch</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CCounter::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <reimplements refid="class_i_counter_1ab54127ddfec6e83d097205b506082372">Reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="446" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="446" bodyend="449"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetValue</definition>
        <argsstring>() const </argsstring>
        <name>GetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="451" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="451" bodyend="454"/>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">m_uValue</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetWarningThresholdMS</definition>
        <argsstring>() const </argsstring>
        <name>GetWarningThresholdMS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="456" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="456" bodyend="459"/>
        <references refid="class_performance_timing_1_1_c_counter_1acc2b75761dbd842c4f4a0f64ad06ef49" compoundref="src_2_performance_timing_8h" startline="488">m_uWarningThreshold</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Int32</type>
        <definition>Int32 PerformanceTiming::CCounter::GetCriticalThresholdMS</definition>
        <argsstring>() const </argsstring>
        <name>GetCriticalThresholdMS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="461" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="461" bodyend="464"/>
        <references refid="class_performance_timing_1_1_c_counter_1a78559dbdd3753e77daa793fb820f623d" compoundref="src_2_performance_timing_8h" startline="489">m_uCriticalThreshold</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_i_counter" kindref="compound">ICounter</ref> *</type>
        <definition>ICounter* PerformanceTiming::CCounter::SetFolderName</definition>
        <argsstring>(const char *szFolderName)</argsstring>
        <name>SetFolderName</name>
        <reimplements refid="class_i_counter_1a514686e8a4cdea17447ec0eb1910cf7e">SetFolderName</reimplements>
        <param>
          <type>const char *</type>
          <declname>szFolderName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="466" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="466" bodyend="470"/>
        <references refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" compoundref="src_2_performance_timing_8cpp" startline="759" endline="767">PerformanceTiming::CPerformanceStat::DoSetFolderName</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_i_counter" kindref="compound">ICounter</ref> *</type>
        <definition>virtual ICounter* PerformanceTiming::CCounter::SetFolderName</definition>
        <argsstring>(int iFolderFlag)</argsstring>
        <name>SetFolderName</name>
        <reimplements refid="class_i_counter_1a80e3de177ab8118cbf3c515915a3e830">SetFolderName</reimplements>
        <param>
          <type>int</type>
          <declname>iFolderFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="472" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="472" bodyend="476"/>
        <references refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" compoundref="src_2_performance_timing_8cpp" startline="769" endline="786">PerformanceTiming::CPerformanceStat::DoSetFolderFlag</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PerformanceTiming::CCounter::HasFlagsSet</definition>
        <argsstring>(UInt32 uiFlags) const </argsstring>
        <name>HasFlagsSet</name>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="478" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="478" bodyend="481"/>
        <references refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" compoundref="src_2_performance_timing_8h" startline="487">m_uiFlags</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PerformanceTiming::CCounter::IsHistoryCounter</definition>
        <argsstring>() const </argsstring>
        <name>IsHistoryCounter</name>
        <reimplementedby refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8">IsHistoryCounter</reimplementedby>
        <reimplementedby refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8">IsHistoryCounter</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="483" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="483" bodyend="483"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Performance Timing Counter object </para>    </detaileddescription>
    <inheritancegraph>
      <node id="736">
        <label>PerformanceTiming::CCounter</label>
        <link refid="class_performance_timing_1_1_c_counter"/>
        <childnode refid="737" relation="public-inheritance">
        </childnode>
        <childnode refid="738" relation="public-inheritance">
        </childnode>
        <childnode refid="737" relation="public-inheritance">
        </childnode>
        <childnode refid="738" relation="public-inheritance">
        </childnode>
      </node>
      <node id="738">
        <label>ICounter</label>
        <link refid="class_i_counter"/>
      </node>
      <node id="739">
        <label>PerformanceTiming::CHistoryCounter</label>
        <link refid="class_performance_timing_1_1_c_history_counter"/>
        <childnode refid="736" relation="public-inheritance">
        </childnode>
        <childnode refid="736" relation="public-inheritance">
        </childnode>
      </node>
      <node id="737">
        <label>PerformanceTiming::CPerformanceStat</label>
        <link refid="class_performance_timing_1_1_c_performance_stat"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="740">
        <label>PerformanceTiming::CCounter</label>
        <link refid="class_performance_timing_1_1_c_counter"/>
        <childnode refid="741" relation="public-inheritance">
        </childnode>
        <childnode refid="744" relation="public-inheritance">
        </childnode>
        <childnode refid="741" relation="public-inheritance">
        </childnode>
        <childnode refid="744" relation="public-inheritance">
        </childnode>
      </node>
      <node id="744">
        <label>ICounter</label>
        <link refid="class_i_counter"/>
      </node>
      <node id="743">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="741">
        <label>PerformanceTiming::CPerformanceStat</label>
        <link refid="class_performance_timing_1_1_c_performance_stat"/>
        <childnode refid="742" relation="usage">
          <edgelabel>m_sFolderName</edgelabel>
          <edgelabel>m_sName</edgelabel>
        </childnode>
      </node>
      <node id="742">
        <label>std::string</label>
        <childnode refid="743" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="401" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="400" bodyend="490"/>
    <listofallmembers>
      <member refid="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Add</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Add</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CCounter</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CCounter</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CheckFlag</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CheckFlag</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Decrement</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Decrement</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>DoSetFolderFlag</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>DoSetFolderFlag</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>DoSetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>DoSetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetCriticalThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetCriticalThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetFolderNameCRC</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetFolderNameCRC</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetWarningThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>GetWarningThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>HardReset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>HardReset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>HasFlagsSet</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>HasFlagsSet</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Increment</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Increment</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>IsHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>IsHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a30c9f32df81a8b04a88ff77d4b1ed99f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>IsTouched</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a30c9f32df81a8b04a88ff77d4b1ed99f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>IsTouched</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a78559dbdd3753e77daa793fb820f623d" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>m_uCriticalThreshold</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>m_uiFlags</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>m_uValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1acc2b75761dbd842c4f4a0f64ad06ef49" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>m_uWarningThreshold</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>Name</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a757d210669b62d6ca1c1e9d94f81dc47" prot="public" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>Name</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Reset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>Reset</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>ResetTouch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>ResetTouch</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>SetValue</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>Touch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CCounter</scope><name>Touch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a24d2ef1fb91699902def98e91ff3bf28" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>~CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a24d2ef1fb91699902def98e91ff3bf28" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>~CPerformanceStat</name></member>
      <member refid="class_i_counter_1a34d6a275e4004ac1b56bb96f87af95ef" prot="public" virt="virtual"><scope>PerformanceTiming::CCounter</scope><name>~ICounter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
