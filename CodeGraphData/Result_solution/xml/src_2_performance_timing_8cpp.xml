<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="src_2_performance_timing_8cpp" kind="file">
    <compoundname>PerformanceTiming.cpp</compoundname>
    <includes refid="src_2_performance_timing_8h" local="yes">PerformanceTiming.h</includes>
    <includes refid="_perf_array_macro_8h" local="yes">PerfArrayMacro.h</includes>
    <includes refid="_per_array_def_8inl" local="yes">PerArrayDef.inl</includes>
    <incdepgraph>
      <node id="46425">
        <label>list</label>
      </node>
      <node id="46419">
        <label>locale</label>
      </node>
      <node id="46429">
        <label>queue</label>
      </node>
      <node id="46403">
        <label>PerfDef.inl</label>
        <link refid="_perf_def_8inl"/>
      </node>
      <node id="46423">
        <label>limits</label>
      </node>
      <node id="46405">
        <label>SeMemPool.h</label>
        <link refid="_se_mem_pool_8h"/>
        <childnode refid="46406" relation="include">
        </childnode>
        <childnode refid="46432" relation="include">
        </childnode>
        <childnode refid="46413" relation="include">
        </childnode>
      </node>
      <node id="46408">
        <label>windows.h</label>
      </node>
      <node id="46413">
        <label>assert.h</label>
      </node>
      <node id="46411">
        <label>stdlib.h</label>
      </node>
      <node id="46432">
        <label>EsLock.h</label>
      </node>
      <node id="46415">
        <label>cmath</label>
      </node>
      <node id="46433">
        <label>EsThread.h</label>
      </node>
      <node id="46422">
        <label>string</label>
      </node>
      <node id="46426">
        <label>map</label>
      </node>
      <node id="46410">
        <label>conio.h</label>
      </node>
      <node id="46396">
        <label>PerformanceTiming.h</label>
        <link refid="src_2_performance_timing_8h"/>
        <childnode refid="46397" relation="include">
        </childnode>
        <childnode refid="46398" relation="include">
        </childnode>
        <childnode refid="46399" relation="include">
        </childnode>
        <childnode refid="46404" relation="include">
        </childnode>
        <childnode refid="46433" relation="include">
        </childnode>
        <childnode refid="46434" relation="include">
        </childnode>
        <childnode refid="46405" relation="include">
        </childnode>
        <childnode refid="46418" relation="include">
        </childnode>
        <childnode refid="46425" relation="include">
        </childnode>
      </node>
      <node id="46409">
        <label>direct.h</label>
      </node>
      <node id="46395">
        <label>RaceServer/src/PerformanceTiming.cpp</label>
        <link refid="src/PerformanceTiming.cpp"/>
        <childnode refid="46396" relation="include">
        </childnode>
        <childnode refid="46435" relation="include">
        </childnode>
        <childnode refid="46436" relation="include">
        </childnode>
      </node>
      <node id="46420">
        <label>fstream</label>
      </node>
      <node id="46407">
        <label>winsock2.h</label>
      </node>
      <node id="46436">
        <label>PerArrayDef.inl</label>
        <link refid="_per_array_def_8inl"/>
      </node>
      <node id="46400">
        <label>TeMisc.h</label>
        <link refid="_te_misc_8h"/>
        <childnode refid="46401" relation="include">
        </childnode>
      </node>
      <node id="46434">
        <label>SeThreadMsg.h</label>
        <link refid="_se_thread_msg_8h"/>
        <childnode refid="46406" relation="include">
        </childnode>
        <childnode refid="46432" relation="include">
        </childnode>
      </node>
      <node id="46401">
        <label>string.h</label>
      </node>
      <node id="46402">
        <label>PerfMacro.h</label>
        <link refid="_perf_macro_8h"/>
      </node>
      <node id="46416">
        <label>ctime</label>
      </node>
      <node id="46424">
        <label>vector</label>
      </node>
      <node id="46430">
        <label>new</label>
      </node>
      <node id="46421">
        <label>sstream</label>
      </node>
      <node id="46406">
        <label>SeInclude.h</label>
        <link refid="_se_include_8h"/>
        <childnode refid="46407" relation="include">
        </childnode>
        <childnode refid="46408" relation="include">
        </childnode>
        <childnode refid="46409" relation="include">
        </childnode>
        <childnode refid="46410" relation="include">
        </childnode>
        <childnode refid="46411" relation="include">
        </childnode>
        <childnode refid="46412" relation="include">
        </childnode>
        <childnode refid="46413" relation="include">
        </childnode>
        <childnode refid="46414" relation="include">
        </childnode>
        <childnode refid="46415" relation="include">
        </childnode>
        <childnode refid="46416" relation="include">
        </childnode>
        <childnode refid="46417" relation="include">
        </childnode>
        <childnode refid="46401" relation="include">
        </childnode>
        <childnode refid="46397" relation="include">
        </childnode>
        <childnode refid="46418" relation="include">
        </childnode>
        <childnode refid="46419" relation="include">
        </childnode>
        <childnode refid="46420" relation="include">
        </childnode>
        <childnode refid="46421" relation="include">
        </childnode>
        <childnode refid="46422" relation="include">
        </childnode>
        <childnode refid="46423" relation="include">
        </childnode>
        <childnode refid="46424" relation="include">
        </childnode>
        <childnode refid="46425" relation="include">
        </childnode>
        <childnode refid="46426" relation="include">
        </childnode>
        <childnode refid="46427" relation="include">
        </childnode>
        <childnode refid="46428" relation="include">
        </childnode>
        <childnode refid="46429" relation="include">
        </childnode>
        <childnode refid="46430" relation="include">
        </childnode>
        <childnode refid="46431" relation="include">
        </childnode>
      </node>
      <node id="46412">
        <label>math.h</label>
      </node>
      <node id="46397">
        <label>EsType.h</label>
      </node>
      <node id="46435">
        <label>PerfArrayMacro.h</label>
        <link refid="_perf_array_macro_8h"/>
      </node>
      <node id="46414">
        <label>cctype</label>
      </node>
      <node id="46427">
        <label>unordered_map</label>
      </node>
      <node id="46398">
        <label>EsPrerequisites.h</label>
      </node>
      <node id="46399">
        <label>PerformacenTimingMgr.h</label>
        <link refid="_performacen_timing_mgr_8h"/>
        <childnode refid="46397" relation="include">
        </childnode>
        <childnode refid="46400" relation="include">
        </childnode>
        <childnode refid="46402" relation="include">
        </childnode>
        <childnode refid="46403" relation="include">
        </childnode>
      </node>
      <node id="46431">
        <label>SeDefine.h</label>
        <link refid="_se_define_8h"/>
      </node>
      <node id="46428">
        <label>set</label>
      </node>
      <node id="46418">
        <label>algorithm</label>
      </node>
      <node id="46417">
        <label>stdio.h</label>
      </node>
      <node id="46404">
        <label>PerformanceTimingFwdDecl.h</label>
        <link refid="src_2_performance_timing_fwd_decl_8h"/>
        <childnode refid="46405" relation="include">
        </childnode>
        <childnode refid="46427" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_performance_timing">PerformanceTiming</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="src_2_performance_timing_8h" kindref="compound">PerformanceTiming.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="namespace_performance_timing" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">PerformanceTiming</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1ad7889d2d86e8419b3d9dc8e4574b364c" kindref="member">IMPLEMENT_POOL</ref>(<ref refid="class_performance_timing_1_1_c_interval_clone" kindref="compound">CIntervalClone</ref>,16,8);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1ad7889d2d86e8419b3d9dc8e4574b364c" kindref="member">IMPLEMENT_POOL</ref>(<ref refid="class_performance_timing_1_1_c_counter_clone" kindref="compound">CCounterClone</ref>,<sp/>16,<sp/>8);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1ad7889d2d86e8419b3d9dc8e4574b364c" kindref="member">IMPLEMENT_POOL</ref>(<ref refid="struct_performance_timing_1_1_se_performace_task" kindref="compound">SePerformaceTask</ref>,16,16);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="namespace_performance_timing_1af58a26f67d7e0da0b58677fb76388b85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save" kindref="compound">SePerformanceSave</ref><sp/><ref refid="namespace_performance_timing_1af58a26f67d7e0da0b58677fb76388b85" kindref="member">g_kPerformanceSave</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="namespace_performance_timing_1a5dc6f9214a67473b678fe7ecd4177a5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_performance_timing_1a5dc6f9214a67473b678fe7ecd4177a5b" kindref="member">DumpIntervalLine</ref>(Es::String&amp;<sp/>sText,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFoldered,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFolder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Es::String&amp;<sp/>sName,<sp/>Float64<sp/>dTimeMS,<sp/>UInt32<sp/>uEntries,<sp/>Float64<sp/>fPercentage,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOddLine,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bClosed)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sHeader;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>uIntervalDispWidth;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFolder)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>=<sp/>120;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>=<sp/>80;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFoldered)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>-=<sp/>(UInt32)(sHeader.length());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cFillChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bOddLine)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cFillChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%10.3fms<sp/>(x%6d)<sp/>%5.1f%%%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sHeader.c_str()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" kindref="member">PerformanceTiming::PaddedString</ref>(sName.c_str(),<sp/>uIntervalDispWidth,<sp/>cFillChar).c_str()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>dTimeMS</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>uEntries</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>fPercentage</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>bClosed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>**NOT<sp/>CLOSED**&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="namespace_performance_timing_1a51bdb87c7a15ae4e5d1147cdf3062672" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespace_performance_timing_1a51bdb87c7a15ae4e5d1147cdf3062672" kindref="member">DumpCounterLine</ref>(Es::String&amp;<sp/>sText,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFoldered,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFolder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Es::String&amp;<sp/>sName,<sp/>UInt32<sp/>uValue,<sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>uTotal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bHistory,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOddLine)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sHeader;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>uIntervalDispWidth;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFolder)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>=<sp/>120;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>=<sp/>80;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bFoldered)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uIntervalDispWidth<sp/>-=<sp/>(UInt32)(sHeader.length());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cFillChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bOddLine)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cFillChar<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bHistory)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%10d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sHeader.c_str()</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" kindref="member">PerformanceTiming::PaddedString</ref>(sName.c_str(),<sp/>uIntervalDispWidth,<sp/>cFillChar).c_str()</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>uValue);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>Current:%10d%sTOTAL:%13d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sHeader.c_str()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" kindref="member">PerformanceTiming::PaddedString</ref>(sName.c_str(),<sp/>uIntervalDispWidth,<sp/>cFillChar).c_str()</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>uValue</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" kindref="member">PerformanceTiming::PaddedString</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>10,<sp/>cFillChar).c_str()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>uTotal);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="class_performance_timing_1_1_se_performance_save_1a9f783dce03ae10ff0a14dfbc99bff21d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9f783dce03ae10ff0a14dfbc99bff21d" kindref="member">SePerformanceSave::SePerformanceSave</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:m_bRun(true)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9653c9a8af8192184a05a1827f8ee16d" kindref="member">m_pkQueueLock</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Es::NormalLock;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="class_performance_timing_1_1_se_performance_save_1a1c7f805b56cac326b8f7d4642dee26d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a1c7f805b56cac326b8f7d4642dee26d2" kindref="member">SePerformanceSave::DoWork</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sText;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.Reserve(1024<sp/>*<sp/>12);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_performance_timing_1_1_se_performance_save_1a4193c73a530b73ba30872731fef2f4b6" kindref="member">m_bRun</ref>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_performance_timing_1_1_se_performance_save_1aac9e1c92df6b8eee9a3ec83031c24a48" kindref="member">m_liTask</ref>.empty())</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9653c9a8af8192184a05a1827f8ee16d" kindref="member">m_pkQueueLock</ref>-&gt;Lock();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_performance_timing_1_1_se_performace_task" kindref="compound">SePerformaceTask</ref>*<sp/>_task=<sp/><ref refid="class_performance_timing_1_1_se_performance_save_1aac9e1c92df6b8eee9a3ec83031c24a48" kindref="member">m_liTask</ref>.front();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1aac9e1c92df6b8eee9a3ec83031c24a48" kindref="member">m_liTask</ref>.pop_front();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9653c9a8af8192184a05a1827f8ee16d" kindref="member">m_pkQueueLock</ref>-&gt;UnLock();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_t<sp/>cur_time<sp/>=<sp/>time(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tm*<sp/>cur_tm<sp/>=<sp/>localtime(&amp;cur_time);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sFileName;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFileName.Format(</highlight><highlight class="stringliteral">&quot;%u-%s%s-intervals-%04d%02d%02d-%02d%02d%02d-tick(%.3fms)-FrameTick(%.3fms)-time(%us)-LastFps(%.2f)-TotalAvgFps(%.2f)%s.txt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a6ca8e68ba5b4935f41345a5578ebb2b1" kindref="member">m_uThreadID</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a2d379f174869498e8c7a9809fa89fd95" kindref="member">_fileName</ref>.c_str()</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_year<sp/>+<sp/>1900</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_mon<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_mday</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_hour</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_min</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>cur_tm-&gt;tm_sec</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1abc9124daa138e85609a538ea769384b1" kindref="member">m_fRealTickTime</ref><sp/>*<sp/>1000.0</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a0afa41a6e7a3b8655ac2370e4b1fb290" kindref="member">m_fFrameTime</ref><sp/>*<sp/>1000.0f</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a7767febdd341382ea980e72524e55316" kindref="member">m_uSecondsFromStart</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1ad8b6eaea7b3970475f105c15267a30f1" kindref="member">m_fLastFps</ref></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1aa3ecc4ce71b566ce44f55ac65dddf9cb" kindref="member">m_fTotalAvgFps</ref></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="stringliteral">&quot;_Warning&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.Format(</highlight><highlight class="stringliteral">&quot;===<sp/>Tick<sp/>Time:<sp/>%.3fms<sp/><sp/><sp/>Frame<sp/>Time<sp/>:<sp/>%.3fms===\n&quot;</highlight><highlight class="normal">,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1abc9124daa138e85609a538ea769384b1" kindref="member">m_fRealTickTime</ref><sp/>*<sp/>1000.0,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a0afa41a6e7a3b8655ac2370e4b1fb290" kindref="member">m_fFrameTime</ref><sp/>*<sp/>1000.0f);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;===Begin<sp/>Time:<sp/>%us<sp/>End<sp/>Time:<sp/>%us<sp/>===\n\n&quot;</highlight><highlight class="normal">,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a6e77f82c14f2c178aaea086e8d88c61d" kindref="member">m_uBeginTraceTime</ref>,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a7767febdd341382ea980e72524e55316" kindref="member">m_uSecondsFromStart</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>intervals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>iIntervalsDumped<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref>.begin(),<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref>.end(),<sp/><ref refid="struct_performance_timing_1_1_pred___stat_key" kindref="compound">PerformanceTiming::Pred_StatKey</ref>());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n&gt;&gt;&gt;&gt;<sp/>Intervals\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;CIntervalCloneFolderSet&gt;<sp/>vFolderSets;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_interval_clone_folder_set_1a3a57560d3f4bc12e3c1d0d9e99d5ac5e" kindref="member">CIntervalCloneFolderSet::BuildFolderSets</ref>(<sp/>vFolderSets,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref><sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;CIntervalCloneFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders<sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_interval_clone_folder_set" kindref="compound">CIntervalCloneFolderSet</ref>&amp;<sp/>FolderSet<sp/>=<sp/>(*iterFolders);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_performance_timing_1aefc82f29adc37e40198bec2fa0f3fa62" kindref="member">PerformanceTiming::TConstIntervalCloneArray</ref>&amp;<sp/>vIntervals<sp/>=<sp/>FolderSet.<ref refid="class_c_interval_clone_folder_set_1a71f6dd676068203ed4897f7bcaa465ab" kindref="member">Intervals</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFoldered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FolderSet.<ref refid="class_c_interval_clone_folder_set_1a847f5feaa793908427b080c458b9fca8" kindref="member">FolderName</ref>()<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>make<sp/>sum<sp/>for<sp/>all<sp/>sub<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float64<sp/>dFolderIntervalTimeMS<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>uFolderEntries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bLastFrameClosed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TConstIntervalCloneArray::const_iterator<sp/>iterEnd<sp/>=<sp/>vIntervals.end();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>PerformanceTiming::TConstIntervalCloneArray::const_iterator<sp/>iter<sp/>=<sp/>vIntervals.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_clone" kindref="compound">PerformanceTiming::CIntervalClone</ref>*<sp/>pInterval<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFolderIntervalTimeMS<sp/>+=<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aff0574d14a2b9d1eb694b16e55b5f6b1" kindref="member">GetLastFrameIntervalTimeSec</ref>()<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uFolderEntries<sp/>+=<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a7ffb54f9a38070f06315797bfc86de8a" kindref="member">GetLastFrameIntervalEntries</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bLastFrameClosed<sp/>&amp;=<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aa2081d9cae3449d0d48aac6aac0216b6" kindref="member">IsLastFrameClosed</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float64<sp/>fFolderPercentage<sp/>=<sp/>(dFolderIntervalTimeMS/1000.0/<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a0afa41a6e7a3b8655ac2370e4b1fb290" kindref="member">m_fFrameTime</ref>)*100.0<ref refid="namespacemake_callback_1a0c646a8863d44327e020456c954f4b2d" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>uFolderEntries<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>bLastFrameClosed<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sDisp;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sDisp.Format(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sFolderFullDispName;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFolderFullDispName.Format(</highlight><highlight class="stringliteral">&quot;(%s)<sp/>%s:<sp/>(%d<sp/>intervals)&quot;</highlight><highlight class="normal">,<sp/>sDisp.c_str(),<sp/>FolderSet.<ref refid="class_c_interval_clone_folder_set_1a847f5feaa793908427b080c458b9fca8" kindref="member">FolderName</ref>(),<sp/>(Int32)(vIntervals.size()));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1a5dc6f9214a67473b678fe7ecd4177a5b" kindref="member">DumpIntervalLine</ref>(<sp/>sText,<sp/>bFoldered,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>sFolderFullDispName,<sp/>dFolderIntervalTimeMS,<sp/>uFolderEntries,<sp/>fFolderPercentage,<sp/>!(iIntervalsDumped++<sp/>&amp;<sp/>1),<sp/>bLastFrameClosed<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bFoldered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TConstIntervalCloneArray::const_iterator<sp/>iterEnd<sp/>=<sp/>vIntervals.end();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>PerformanceTiming::TConstIntervalCloneArray::const_iterator<sp/>iter<sp/>=<sp/>vIntervals.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_clone" kindref="compound">PerformanceTiming::CIntervalClone</ref>*<sp/>pInterval<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float64<sp/>dIntervalTime<sp/>=<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aff0574d14a2b9d1eb694b16e55b5f6b1" kindref="member">GetLastFrameIntervalTimeSec</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float64<sp/>dIntervalTimeMS<sp/>=<sp/>dIntervalTime<sp/>*<sp/>1000.0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>uEntries<sp/>=<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a7ffb54f9a38070f06315797bfc86de8a" kindref="member">GetLastFrameIntervalEntries</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>uEntries<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aa2081d9cae3449d0d48aac6aac0216b6" kindref="member">IsLastFrameClosed</ref>()<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Float64<sp/>fPercentage<sp/>=<sp/>(dIntervalTime/CPerformanceTiming::InstanceQuick()-&gt;GetLastRealTimeDeltaSec())*100.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float64<sp/>fPercentage<sp/>=<sp/>(dIntervalTime<sp/>/<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a0afa41a6e7a3b8655ac2370e4b1fb290" kindref="member">m_fFrameTime</ref>)*100.0<ref refid="namespacemake_callback_1a0c646a8863d44327e020456c954f4b2d" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1a5dc6f9214a67473b678fe7ecd4177a5b" kindref="member">DumpIntervalLine</ref>(<sp/>sText,<sp/>bFoldered,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a00cf53b59bbd8fb6166daa9ae3fd6e8d" kindref="member">Name</ref>(),<sp/>dIntervalTimeMS,<sp/>uEntries,<sp/>fPercentage,<sp/>!(iIntervalsDumped++<sp/>&amp;<sp/>1),<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aa2081d9cae3449d0d48aac6aac0216b6" kindref="member">IsLastFrameClosed</ref>()<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//All<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;\n\n\n&gt;&gt;&gt;&gt;<sp/>Counters\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;CCounterCloneFolderSet&gt;<sp/>vFolderSets;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_counter_clone_folder_set_1aa64f87bd85f688d65d313e89b55747d7" kindref="member">CCounterCloneFolderSet::BuildFolderSets</ref>(vFolderSets,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a40e0d51277c0fcaa8c88e8adcbdb8b3d" kindref="member">_CounterArray</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>iCountersDrawn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;CCounterCloneFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_counter_clone_folder_set" kindref="compound">CCounterCloneFolderSet</ref>&amp;<sp/>FolderSet<sp/>=<sp/>(*iterFolders);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_performance_timing_1a1a27219ff610f3847b9412ded898e35d" kindref="member">PerformanceTiming::TConstCounterCloneArray</ref>&amp;<sp/>vCounters<sp/>=<sp/>FolderSet.<ref refid="class_c_counter_clone_folder_set_1af53157d53bb29370bac839aaa03bd0d4" kindref="member">Counters</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFoldered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FolderSet.<ref refid="class_c_counter_clone_folder_set_1af1993fa9186209b4c8c281ea044e3c61" kindref="member">FolderName</ref>())</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sDisp;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sDisp.Format(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Es::String<sp/>sFolderFullDispName;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sFolderFullDispName.Format(</highlight><highlight class="stringliteral">&quot;(%s)<sp/>%s:<sp/>(%d<sp/>counters)&quot;</highlight><highlight class="normal">,<sp/>sDisp.c_str(),<sp/>FolderSet.<ref refid="class_c_counter_clone_folder_set_1af1993fa9186209b4c8c281ea044e3c61" kindref="member">FolderName</ref>(),<sp/>(Int32)(vCounters.size()));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>sFolderFullDispName.c_str());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bFoldered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TConstCounterCloneArray::const_iterator<sp/>iterEnd<sp/>=<sp/>vCounters.end();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TConstCounterCloneArray::const_iterator<sp/>iter<sp/>=<sp/>vCounters.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_counter_clone" kindref="compound">PerformanceTiming::CCounterClone</ref>*<sp/>pCounter<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a3a951ea0573156916c4b4619c470ee81" kindref="member">IsHistoryCounter</ref>())</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UInt32<sp/>uValue<sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1acd397766c067657c2a1e9f964fe83048" kindref="member">GetLastValue</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>uTotal<sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a9c6bd13eddb34741d7b2b59704e22664" kindref="member">GetRunningTotal</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1a51bdb87c7a15ae4e5d1147cdf3062672" kindref="member">DumpCounterLine</ref>(sText,<sp/>bFoldered,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1aeef87932f0fee56af55502dca5564c2f" kindref="member">Name</ref>(),<sp/>uValue,<sp/>uTotal,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>!(iCountersDrawn++<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_performance_timing_1a51bdb87c7a15ae4e5d1147cdf3062672" kindref="member">DumpCounterLine</ref>(sText,<sp/>bFoldered,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1aeef87932f0fee56af55502dca5564c2f" kindref="member">Name</ref>(),<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1ae5e5c5a258b89e1bfbce431d85e5a4f2" kindref="member">GetValue</ref>(),<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1ae5e5c5a258b89e1bfbce431d85e5a4f2" kindref="member">GetValue</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>!(iCountersDrawn++<sp/>&amp;<sp/>1));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;\n\n\n&gt;&gt;&gt;&gt;<sp/>Custom<sp/>dump<sp/>string\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText.AppendFormat(</highlight><highlight class="stringliteral">&quot;\n\n\n=============<sp/>MAX<sp/>DUMP<sp/>TIME<sp/>%fms<sp/>==============<sp/>CurDumpIntervalTime<sp/>%dms<sp/><sp/>==================&quot;</highlight><highlight class="normal">,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a3dd5ebe26b4d111f970afcf7a0f328ac" kindref="member">m_fMaxDumpTimes</ref><sp/>*<sp/>1000.0,<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref>.<ref refid="struct_performance_timing_1_1_se_perfocemance_time_1a770560a24ca706f84e8791460cc7d728" kindref="member">m_fCurDumpTime</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>pkFile<sp/>=<sp/>fopen(sFileName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;a+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkFile)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a50696d2f5ae60c2e2df3028f1ed3bc6f" kindref="member">_pFileDat</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sText<sp/>+=<sp/>*(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a50696d2f5ae60c2e2df3028f1ed3bc6f" kindref="member">_pFileDat</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(sText.c_str(),<sp/>sText.Length(),<sp/>1,<sp/>pkFile);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(pkFile);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a50696d2f5ae60c2e2df3028f1ed3bc6f" kindref="member">_pFileDat</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a50696d2f5ae60c2e2df3028f1ed3bc6f" kindref="member">_pFileDat</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a40e0d51277c0fcaa8c88e8adcbdb8b3d" kindref="member">_CounterArray</ref>.size();<sp/>++ii)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCounterClone::DEL(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a40e0d51277c0fcaa8c88e8adcbdb8b3d" kindref="member">_CounterArray</ref>[ii]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref>.size();<sp/>++ii)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CIntervalClone::DEL(_task-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref>[ii]);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SePerformaceTask::DEL(_task);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sleep(500);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="class_performance_timing_1_1_se_performance_save_1adba28713f5876c95db9e2e2523b80113" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1adba28713f5876c95db9e2e2523b80113" kindref="member">SePerformanceSave::PushTask</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Es::String&amp;<sp/>rFileName,<sp/>Es::String*<sp/>pStrDat,<ref refid="namespace_performance_timing_1ac6707feaaa4f4727d7bf2f86f2539dbb" kindref="member">PerformanceTiming::TIntervalCloneArray</ref>&amp;<sp/>rIntervals,<ref refid="namespace_performance_timing_1ac964deca5e0cd7c10b938682b5ec145b" kindref="member">PerformanceTiming::TCounterCloneArray</ref>&amp;<sp/>rCounts,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_performance_timing_1_1_se_perfocemance_time" kindref="compound">SePerfocemanceTime</ref>&amp;<sp/>oTime)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9653c9a8af8192184a05a1827f8ee16d" kindref="member">m_pkQueueLock</ref>-&gt;Lock();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_performance_timing_1_1_se_performace_task" kindref="compound">SePerformaceTask</ref>*<sp/>pTask<sp/>=<sp/>SePerformaceTask::NEW();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTask-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a2d379f174869498e8c7a9809fa89fd95" kindref="member">_fileName</ref><sp/>=<sp/>rFileName;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTask-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a50696d2f5ae60c2e2df3028f1ed3bc6f" kindref="member">_pFileDat</ref><sp/>=<sp/>pStrDat;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTask-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a03b6ead500755f3a1fa150c11050977f" kindref="member">_IntervalArray</ref>.swap(rIntervals);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTask-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a40e0d51277c0fcaa8c88e8adcbdb8b3d" kindref="member">_CounterArray</ref>.swap(rCounts);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pTask-&gt;<ref refid="struct_performance_timing_1_1_se_performace_task_1a6e2482bb068e695a2cef7b652dda41c6" kindref="member">_oTime</ref><sp/>=<sp/>oTime;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1aac9e1c92df6b8eee9a3ec83031c24a48" kindref="member">m_liTask</ref>.push_back(pTask);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_se_performance_save_1a9653c9a8af8192184a05a1827f8ee16d" kindref="member">m_pkQueueLock</ref>-&gt;UnLock();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="namespace_performance_timing_1aa8b0823932e48b2b193a7214909d2f1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespace_performance_timing_1aa8b0823932e48b2b193a7214909d2f1d" kindref="member">MakePadString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szString,<sp/>Int32<sp/>dLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cPad)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sPad;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>iPad<sp/>=<sp/>dLen<sp/>-<sp/>(Int32)strlen(szString);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iPad<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sPad.resize(iPad,<sp/>cPad);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sPad;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespace_performance_timing_1a0e3560920b69a2ee58cc9a42e2b7143b" kindref="member">PaddedString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szSrc,<sp/>Int32<sp/>iLen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cPad)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sPadded;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sPadded.resize(iLen,<sp/>cPad);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int32<sp/>iSrc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(szSrc[iSrc]<sp/>&amp;&amp;<sp/>iSrc<sp/>&lt;<sp/>iLen)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sPadded[iSrc]<sp/>=<sp/>szSrc[iSrc];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iSrc++;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sPadded;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><ref refid="src_2_performance_timing_8h_1a40bd6310fcca328f5587889e11770b98" kindref="member">thread_var</ref><sp/><ref refid="class_i_performace_timing" kindref="compound">IPerformaceTiming</ref>*<sp/><ref refid="class_c_r_s_performance_timing_mgr_1a1b22b4f21c56fb15240b79189e147b44" kindref="member">CRSPerformanceTimingMgr::ms_pPer</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="318" refid="class_c_r_s_performance_timing_mgr_1ac2a358e11cc6e015ade568e8a0aff3a7" refkind="member"><highlight class="normal"><ref refid="class_i_performace_timing" kindref="compound">IPerformaceTiming</ref>*<sp/><ref refid="class_c_r_s_performance_timing_mgr_1ac2a358e11cc6e015ade568e8a0aff3a7" kindref="member">CRSPerformanceTimingMgr::MutiInstance</ref>()</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_r_s_performance_timing_mgr_1a1b22b4f21c56fb15240b79189e147b44" kindref="member">ms_pPer</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_r_s_performance_timing_mgr_1a1b22b4f21c56fb15240b79189e147b44" kindref="member">ms_pPer</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing" kindref="compound">CPerformanceTiming</ref>();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_r_s_performance_timing_mgr_1a1b22b4f21c56fb15240b79189e147b44" kindref="member">ms_pPer</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="class_c_r_s_performance_timing_mgr_1a4f84c9c205b62ac3625c13a6def4e3b4" refkind="member"><highlight class="normal"><ref refid="class_i_performace_timing" kindref="compound">IPerformaceTiming</ref>*<sp/><ref refid="class_c_r_s_performance_timing_mgr_1a4f84c9c205b62ac3625c13a6def4e3b4" kindref="member">CRSPerformanceTimingMgr::MutiInstanceQuick</ref>()</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_r_s_performance_timing_mgr_1a1b22b4f21c56fb15240b79189e147b44" kindref="member">ms_pPer</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a5b6141b16f1df83a9727e9df8f84a920" kindref="member">CPerformanceTiming::m_sbIntervalsActive</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal">UInt32<sp/><ref refid="class_c_performance_timing_1a519c3db9b5e617acab3f4e9a77e05996" kindref="member">CPerformanceTiming::m_suiIntervalsVerboseLevel</ref><sp/>=<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal">UInt32<sp/><ref refid="class_c_performance_timing_1aa376b197ade415fa335504ed422c7283" kindref="member">CPerformanceTiming::m_suiIntervalDispWidth</ref><sp/>=<sp/>48;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">Float64<sp/><ref refid="class_performance_timing_1_1_c_interval_1ac64c695bf259d32f57b7f68a8d7cbbe3" kindref="member">PerformanceTiming::CInterval::s_dLastFrameNegIntervalTimeSec</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">Float64<sp/><ref refid="class_performance_timing_1_1_c_interval_1a32f18388da0a3ce266f5943c0caedc35" kindref="member">PerformanceTiming::CInterval::s_dThisFrameNegIntervalTimeSec</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/><ref refid="class_c_performance_timing_1af8dd0acac64f8301dafca6306a829757" kindref="member">CPerformanceTiming::s_maxFramePktHandlerInterval</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="class_c_performance_timing_1ad185bb86b437ea3a1847e57af28d5ea8" refkind="member"><highlight class="normal"><ref refid="class_c_performance_timing_1ad185bb86b437ea3a1847e57af28d5ea8" kindref="member">CPerformanceTiming::CPerformanceTiming</ref>()</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_LastTime(<sp/></highlight><highlight class="comment">/*GetPerformanceCounter()*/</highlight><highlight class="normal"><sp/>timeGetTime()<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_TotalElapsedTime(<sp/></highlight><highlight class="comment">/*GetPerformanceCounter()*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_LastFrameTime(m_LastTime)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_fLastDumpTotalTime(0)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_fFpsTime(0)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_fLastFps(0)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_uTotalCounts(0)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_fTotalAvgFps(0)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_uLastCounts(0)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_pack_counter" kindref="compound">PerformanceTiming::CPackCounter</ref>(</highlight><highlight class="stringliteral">&quot;PacketSize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" kindref="member">DoSetFolderName</ref>(</highlight><highlight class="stringliteral">&quot;PacketStat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="class_c_performance_timing_1a09ebed7ab6542b0de4990a28fa565617" refkind="member"><highlight class="normal"><ref refid="class_c_performance_timing_1a09ebed7ab6542b0de4990a28fa565617" kindref="member">CPerformanceTiming::~CPerformanceTiming</ref>()</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="class_c_performance_timing_1a4f88adba887fed6e7d048d5cd56ea83a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a4f88adba887fed6e7d048d5cd56ea83a" kindref="member">CPerformanceTiming::Init</ref>()</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>EPERF_MAX_NODE;<sp/>++ii)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a82a718e9fe4e5078c5068b5d333df0e2" kindref="member">_InnerArray</ref>[ii]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_perf_array_macro_8h" kindref="compound">PerfArrayMacro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_per_array_def_8inl" kindref="compound">PerArrayDef.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_perf_array_macro_8h" kindref="compound">PerfArrayMacro.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="class_c_performance_timing_1a6b06378498f520f4f955f91fa91b3d80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a6b06378498f520f4f955f91fa91b3d80" kindref="member">CPerformanceTiming::ResetAll</ref>()</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.begin();<sp/>iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end();<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;second-&gt;HardReset();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="class_c_performance_timing_1ae56ca41ef27a84f3558c02102b21d9e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1ae56ca41ef27a84f3558c02102b21d9e9" kindref="member">CPerformanceTiming::AddSink</ref>(<sp/><ref refid="class_c_performance_timing_sink" kindref="compound">CPerformanceTimingSink</ref>*<sp/>pSink<sp/>)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>.push_back(<sp/>pSink<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>pSink-&gt;<ref refid="class_c_performance_timing_sink_1a206ecc29d06a87ad96f408ef88569ea4" kindref="member">SetOwner</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="class_c_performance_timing_1a1917d26420b0ac9ed7513be6f734458e" refkind="member"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/><ref refid="class_c_performance_timing_1ac08c7af33d9cce3d7276af1ef5eacee4" kindref="member">CPerformanceTiming::LookupInterval</ref>(<sp/><ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/>nameID<sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalMap::iterator<sp/>it<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.find(<sp/>nameID<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end()<sp/>)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="class_c_performance_timing_1ac08c7af33d9cce3d7276af1ef5eacee4" refkind="member"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/><ref refid="class_c_performance_timing_1ac08c7af33d9cce3d7276af1ef5eacee4" kindref="member">CPerformanceTiming::LookupInterval</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched<sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/>nameID<sp/>=<sp/><ref refid="namespace_performance_timing_1aaa1359d75567ed83fbfbfcfbfc7563d1" kindref="member">PerformanceTiming::CRCString</ref>(<sp/>szName<sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInterval<sp/>=<sp/><ref refid="class_c_performance_timing_1ac08c7af33d9cce3d7276af1ef5eacee4" kindref="member">LookupInterval</ref>(<sp/>nameID<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pInterval<sp/>&amp;&amp;<sp/>(<sp/>!bOnlyIncludeTouched<sp/>||<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a30c9f32df81a8b04a88ff77d4b1ed99f" kindref="member">IsTouched</ref>()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pInterval;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="class_c_performance_timing_1aede24c2c88cbb06cfc1d6bdd0d3a21b7" refkind="member"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>*<sp/><ref refid="class_c_performance_timing_1aede24c2c88cbb06cfc1d6bdd0d3a21b7" kindref="member">CPerformanceTiming::LookupCounter</ref>(<ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TCounterMap::iterator<sp/>it<sp/>=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.end()<sp/>&amp;&amp;<sp/>(<sp/>!bOnlyIncludeTouched<sp/>||it-&gt;second-&gt;IsTouched()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" refkind="member"><highlight class="normal"><ref refid="class_i_interval" kindref="compound">IInterval</ref>*<sp/><ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CPerformanceTiming::CreateOrLookupInterval</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/>UInt32<sp/>uiFlags,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dWarning,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCritical<sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/>nameID<sp/>=<sp/><ref refid="namespace_performance_timing_1aaa1359d75567ed83fbfbfcfbfc7563d1" kindref="member">PerformanceTiming::CRCString</ref>(<sp/>szName<sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.find(<sp/>nameID<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end()<sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInterval<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>(<sp/>szName,<sp/>uiFlags,<sp/>dWarning,<sp/>dCritical<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.insert(<sp/>std::make_pair(<sp/>nameID,<sp/>pInterval<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pInterval;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="class_c_performance_timing_1ab4f3b239b4b98a2d00dc8d2158ef583b" refkind="member"><highlight class="normal"><ref refid="class_i_interval" kindref="compound">IInterval</ref>*<sp/><ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CPerformanceTiming::CreateOrLookupInterval</ref>(<ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uiFlags<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dWarning<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCritical<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end())</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInterval<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>(szName,<sp/>uiFlags,<sp/>dWarning,<sp/>dCritical);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.insert(std::make_pair(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>pInterval));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pInterval;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="class_c_performance_timing_1aed424e089bf3124a4a39792070079604" refkind="member"><highlight class="normal"><ref refid="class_i_interval" kindref="compound">IInterval</ref>*<sp/><ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CPerformanceTiming::CreateOrLookupInterval</ref>(<ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szFolderName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uiFlags<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dWarning<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCritical<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_interval" kindref="compound">IInterval</ref>*<sp/>pRes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end())</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>found<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pRes;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pRes<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes<sp/>=<sp/><ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CreateOrLookupInterval</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>szName,<sp/>uiFlags,<sp/>dWarning,<sp/>dCritical);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes-&gt;<ref refid="class_i_interval_1abe2b0e8b0142c003e71bb69450337425" kindref="member">SetFolderName</ref>(szFolderName);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pRes;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="class_c_performance_timing_1ae5d381acf6111adc23457f4e6cff50d3" refkind="member"><highlight class="normal"><ref refid="class_i_counter" kindref="compound">ICounter</ref>*<sp/><ref refid="class_c_performance_timing_1ae5d381acf6111adc23457f4e6cff50d3" kindref="member">CPerformanceTiming::CreateOrLookupCounter</ref>(<ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uiFlags<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dWarning<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCritical<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>*<sp/>pCounter<sp/>=<sp/><ref refid="class_c_performance_timing_1aede24c2c88cbb06cfc1d6bdd0d3a21b7" kindref="member">LookupCounter</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pCounter)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pCounter;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uiFlags<sp/>&amp;<sp/>(<ref refid="_performacen_timing_mgr_8h_1a282820dcf883c4eff902816f24e608fea3d4a2275554f29eb1b451773409912c1" kindref="member">eCounterFlags_ResetEachFrame</ref>))</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_history_counter" kindref="compound">PerformanceTiming::CHistoryCounter</ref>*<sp/>pHistoryCounter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_history_counter" kindref="compound">PerformanceTiming::CHistoryCounter</ref>(szName,<sp/>uiFlags);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>.push_back(pHistoryCounter);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCounter<sp/>=<sp/>pHistoryCounter;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCounter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>(szName,<sp/>uiFlags,<sp/>dWarning,<sp/>dCritical);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>.push_back(pCounter);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.insert(std::make_pair(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>pCounter));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pCounter;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="class_c_performance_timing_1a6fe6a3b8e54b3d5ca415a238933c19b3" refkind="member"><highlight class="normal"><ref refid="class_i_counter" kindref="compound">ICounter</ref>*<sp/><ref refid="class_c_performance_timing_1ae5d381acf6111adc23457f4e6cff50d3" kindref="member">CPerformanceTiming::CreateOrLookupCounter</ref>(<ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szFolderName,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>uiFlags<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dWarning<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCritical<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0.0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_counter" kindref="compound">ICounter</ref>*<sp/>pRes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TCounterMap::iterator<sp/>it<sp/>=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.end())</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pRes;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pRes<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes<sp/>=<sp/><ref refid="class_c_performance_timing_1ae5d381acf6111adc23457f4e6cff50d3" kindref="member">CreateOrLookupCounter</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>szName,<sp/>uiFlags,<sp/>dWarning,<sp/>dCritical);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRes-&gt;<ref refid="class_i_counter_1a514686e8a4cdea17447ec0eb1910cf7e" kindref="member">SetFolderName</ref>(szFolderName);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pRes;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="class_c_performance_timing_1ab9b24d90377352506b39c6b7d0214170" refkind="member"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/><ref refid="class_c_performance_timing_1ab9b24d90377352506b39c6b7d0214170" kindref="member">CPerformanceTiming::CreateOrLookupChildInterval</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szChild,<sp/>UInt32<sp/>uiFlags<sp/>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pParent<sp/>=<sp/>(<ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*)<ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CreateOrLookupInterval</ref>(<sp/>szName,<sp/>uiFlags<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pChild<sp/>=<sp/>(<ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*)<ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CreateOrLookupInterval</ref>(<sp/>szChild<sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>pParent-&gt;<ref refid="class_performance_timing_1_1_c_interval_1a07df2b2cd69021c9c0f4fc86a6109340" kindref="member">AddChild</ref>(<sp/>pChild<sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pChild;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="class_c_performance_timing_1a3cc6c2bbe3e104f0432aa47adce1004b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a3cc6c2bbe3e104f0432aa47adce1004b" kindref="member">CPerformanceTiming::addPacketStatu</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_te_m_d5" kindref="compound">TeMD5</ref>&amp;<sp/>rRaceID,<sp/>UInt32<sp/>iPacketID,<sp/>UInt32<sp/>iSize)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>PerformanceTiming::CPackCounter::SPackData&amp;<sp/>rDat<sp/>=<sp/>m_pPackCounter-&gt;m_mRacePackDatas[rRaceID][iPacketID];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>rDat.m_uSize<sp/>+=<sp/>iSize;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>++rDat.m_uCount;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>m_pPackCounter-&gt;m_mRacePackTotalSize[rRaceID]<sp/>+=<sp/>iSize;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="class_c_performance_timing_1ae0962ac17cf87db64135b757cce4b8a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1ae0962ac17cf87db64135b757cce4b8a6" kindref="member">CPerformanceTiming::addPacketRealTotalSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_te_m_d5" kindref="compound">TeMD5</ref>&amp;<sp/>rRaceID,<sp/>UInt32<sp/>iSize)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a69d7d6a47365a159264a11bcd4fe6510" kindref="member">m_mRaceRealPackTotalSize</ref>[rRaceID]<sp/>+=<sp/>iSize;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a626120bea388485c0abecdf36e2bf491" kindref="member">m_mMaxPackTotalSize</ref><sp/>=<sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a69d7d6a47365a159264a11bcd4fe6510" kindref="member">m_mRaceRealPackTotalSize</ref>[rRaceID]<sp/>&gt;<sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a626120bea388485c0abecdf36e2bf491" kindref="member">m_mMaxPackTotalSize</ref><sp/>?<sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a69d7d6a47365a159264a11bcd4fe6510" kindref="member">m_mRaceRealPackTotalSize</ref>[rRaceID]<sp/>:<sp/><ref refid="class_c_performance_timing_1a7d08c4246e033e522ecf39145cc30f69" kindref="member">m_pPackCounter</ref>-&gt;<ref refid="class_performance_timing_1_1_c_pack_counter_1a626120bea388485c0abecdf36e2bf491" kindref="member">m_mMaxPackTotalSize</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="class_c_performance_timing_1ab14acbc8b35a8e68fbe8d6dcd60929f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1ab14acbc8b35a8e68fbe8d6dcd60929f9" kindref="member">CPerformanceTiming::ResetCounters</ref>()</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TCounterMap::iterator<sp/>itEnd<sp/>=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.end();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TCounterMap::iterator<sp/>it<sp/>=<sp/><ref refid="class_c_performance_timing_1a736c54d5874a99c02df5ef7d3ab05293" kindref="member">m_mAllCounters</ref>.begin();<sp/>it<sp/>!=<sp/>itEnd;<sp/>++it)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>*<sp/>pCounter<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="class_c_performance_timing_1a1a6d876c5a79bd3fc83e7df140173939" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a1a6d876c5a79bd3fc83e7df140173939" kindref="member">CPerformanceTiming::Start</ref>()</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_LastFrameTime<sp/>=<sp/>GetPerformanceCounter();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1ae1d14f126a144f73916d570d0ac72624" kindref="member">m_LastFrameTime</ref><sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="class_c_performance_timing_1a38cc438ad24d97b86a37a4e0fd63e185" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a38cc438ad24d97b86a37a4e0fd63e185" kindref="member">CPerformanceTiming::TickNotify</ref>()</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="src_2_performance_timing_fwd_decl_8h_1abeb679dbf226046cf865060f1ee6398f" kindref="member">CRC_ID</ref><sp/>__TickPerfTime<sp/>=<sp/><ref refid="namespace_performance_timing_1aaa1359d75567ed83fbfbfcfbfc7563d1" kindref="member">PerformanceTiming::CRCString</ref>(</highlight><highlight class="stringliteral">&quot;TickPerfTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInterval<sp/>=<sp/>(<ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*)<ref refid="class_c_performance_timing_1a5b59f88895ce835a1ce7443d0812d43f" kindref="member">CPerformanceTiming::Instance</ref>()-&gt;<ref refid="class_c_performance_timing_1a21391060dfc65ee8323b8ecb782982fd" kindref="member">CreateOrLookupInterval</ref>(__TickPerfTime,</highlight><highlight class="stringliteral">&quot;TickPerfTime&quot;</highlight><highlight class="normal"><sp/>)-&gt;<ref refid="class_i_interval_1abe2b0e8b0142c003e71bb69450337425" kindref="member">SetFolderName</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Tick&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_1ac7dffd5c24210fa8b55f2fe59eb9b5e3" kindref="member">Start</ref>();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>.size();<sp/>++ii)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>[ii]-&gt;AdvanceFrame();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalMap::iterator<sp/>itEnd<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.begin();<sp/>iter<sp/>!=<sp/>itEnd;<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pInterval<sp/>!=<sp/>iter-&gt;second<sp/>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;second-&gt;AdvanceFrame();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_1a05192a46041bdca7c17ff4d95d239025" kindref="member">End</ref>();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_1aa7f6f231b8eb7b78bdb3f641c2478738" kindref="member">AdvanceFrame</ref>();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval_1a56f0db05638f8f054cb0224f4e99ff1d" kindref="member">PerformanceTiming::CInterval::AdvanceFrameStatic</ref>();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UInt64<sp/>CurrentTime<sp/>=<sp/>GetPerformanceCounter();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>CurrentTime<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>FrameCurrentTime<sp/>=<sp/>CurrentTime;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1af882002a34968ce845e046c3fd138b02" kindref="member">m_DeltaTime</ref><sp/>=<sp/>CurrentTime<sp/>-<sp/><ref refid="class_c_performance_timing_1a3e714c73702b37645c49c29d91aa788f" kindref="member">m_LastTime</ref>;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>m_LastTime<sp/>=<sp/>CurrentTime;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>frameDetalTime<sp/>=<sp/>FrameCurrentTime<sp/>-<sp/><ref refid="class_c_performance_timing_1ae1d14f126a144f73916d570d0ac72624" kindref="member">m_LastFrameTime</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>fDeltaTime<sp/>=<sp/>(float)CounterToSeconds(frameDetalTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fDeltaTime<sp/>=<sp/>frameDetalTime<sp/>*<sp/>0.001f;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_c_performance_timing_1afd3eaa87641035ae97b744f9b360c95f" kindref="member">m_uTotalCounts</ref>;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1ae591921c35116087f40c9a365493085f" kindref="member">m_TotalElapsedTime</ref><sp/>+=<sp/><ref refid="class_c_performance_timing_1af882002a34968ce845e046c3fd138b02" kindref="member">m_DeltaTime</ref>;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_performance_timing_1ae591921c35116087f40c9a365493085f" kindref="member">m_TotalElapsedTime</ref><sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a4ebda6453be41abfe61e569346deaf79" kindref="member">m_fTotalAvgFps</ref><sp/>=<sp/><ref refid="class_c_performance_timing_1afd3eaa87641035ae97b744f9b360c95f" kindref="member">m_uTotalCounts</ref><sp/>/<sp/>(<ref refid="class_c_performance_timing_1ae591921c35116087f40c9a365493085f" kindref="member">m_TotalElapsedTime</ref><sp/>*<sp/>0.001f);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_c_performance_timing_1aa130a27ee7532df304a71458a7cfa3de" kindref="member">m_uLastCounts</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a1b95ef8712b17d3d8afdffe39ab7b462" kindref="member">m_fFpsTime</ref><sp/>+=<sp/><ref refid="class_c_performance_timing_1af882002a34968ce845e046c3fd138b02" kindref="member">m_DeltaTime</ref><sp/>*<sp/>0.001f;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_performance_timing_1a1b95ef8712b17d3d8afdffe39ab7b462" kindref="member">m_fFpsTime</ref><sp/>&gt;=<sp/>0.999999<ref refid="namespacemake_callback_1a0c646a8863d44327e020456c954f4b2d" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a04530c0d9cc84316957c3a0bcb62c314" kindref="member">m_fLastFps</ref><sp/>=<sp/><ref refid="class_c_performance_timing_1aa130a27ee7532df304a71458a7cfa3de" kindref="member">m_uLastCounts</ref><sp/>/<sp/><ref refid="class_c_performance_timing_1a1b95ef8712b17d3d8afdffe39ab7b462" kindref="member">m_fFpsTime</ref>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a1b95ef8712b17d3d8afdffe39ab7b462" kindref="member">m_fFpsTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aa130a27ee7532df304a71458a7cfa3de" kindref="member">m_uLastCounts</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//M_DoInterval_FN(<sp/>&quot;TickPerfTimeSink&quot;,<sp/>&quot;Tick&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_performacen_timing_mgr_8h_1a06280e0121db5579b38acbebe5b3899a" kindref="member">M_DoMutiInterval_FN</ref>(</highlight><highlight class="stringliteral">&quot;TickPerfTimeSink&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Tick&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWord<sp/>dwStartDump<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>UInt32<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>.size();<sp/>++ii<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii]-&gt;Tick(<sp/>fDeltaTime<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_pPackCounter-&gt;HardReset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aac7085b28d25132967d4d47bd692c07d" kindref="member">m_fLastDumpTotalTime</ref><sp/>=<sp/>(timeGetTime()<sp/>-<sp/>dwStartDump)<sp/>*<sp/>0.001<ref refid="namespacemake_callback_1a0c646a8863d44327e020456c954f4b2d" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//static<sp/>PerformanceTiming::CInterval*<sp/>pInterval<sp/>=<sp/>(PerformanceTiming::CInterval*)CPerformanceTiming::Instance()-&gt;CreateOrLookupInterval(<sp/>&quot;TickPerfTime&quot;<sp/>)-&gt;SetFolderName(<sp/>&quot;Tick&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="class_c_performance_timing_1a2f16681e87772ee9a99af1687eafeddc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a2f16681e87772ee9a99af1687eafeddc" kindref="member">CPerformanceTiming::EnumerateIntervals</ref>(<sp/><ref refid="namespace_performance_timing_1a5b5f704d02e5edeabd1c6b97d4745ec1" kindref="member">PerformanceTiming::TConstIntervalArray</ref>&amp;<sp/>vIntervals,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched<sp/>)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.begin();<sp/>iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end();<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>!bOnlyIncludeTouched<sp/>||<sp/>iter-&gt;second-&gt;IsTouched()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vIntervals.push_back(<sp/>iter-&gt;second<sp/>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sort(<sp/>vIntervals.begin(),<sp/>vIntervals.end(),<sp/>PerformanceTiming::Pred_StatByName()<sp/>);<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="class_c_performance_timing_1adf4e577d676152b8799ad9cbdbc529c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1adf4e577d676152b8799ad9cbdbc529c3" kindref="member">CPerformanceTiming::EnumerateAllCounters</ref>(<ref refid="namespace_performance_timing_1a2f19e1a12beadfd5b60325a7f4ccd465" kindref="member">PerformanceTiming::TConstCounterArray</ref>&amp;<sp/>vAllCounters,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>true<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt32<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>.size();<sp/>ii++)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bOnlyIncludeTouched<sp/>||<sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>[ii]-&gt;IsTouched())</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAllCounters.push_back(<ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>[ii]);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt32<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>.size();<sp/>ii++)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bOnlyIncludeTouched<sp/>||<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>[ii]-&gt;IsTouched())</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAllCounters.push_back(<ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>[ii]);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sort(vAllCounters.begin(),<sp/>vAllCounters.end(),<sp/>PerformanceTiming::Pred_StatByName());<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="class_c_performance_timing_1a38561b85313af8dcbef1bac3b4d6087f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a2f16681e87772ee9a99af1687eafeddc" kindref="member">CPerformanceTiming::EnumerateIntervals</ref>(<ref refid="namespace_performance_timing_1ac6707feaaa4f4727d7bf2f86f2539dbb" kindref="member">PerformanceTiming::TIntervalCloneArray</ref>&amp;<sp/>vIntervals,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TIntervalMap::iterator<sp/>iter<sp/>=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.begin();<sp/>iter<sp/>!=<sp/><ref refid="class_c_performance_timing_1a8107d16d0be4528a552a71c5dc5795e4" kindref="member">m_mAllIntervals</ref>.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!bOnlyIncludeTouched<sp/>||<sp/>iter-&gt;second-&gt;IsTouched()))</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInter<sp/>=<sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_interval_clone" kindref="compound">PerformanceTiming::CIntervalClone</ref>*<sp/>pDat<sp/>=<sp/>PerformanceTiming::CIntervalClone::NEW();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a088e06bdaf48ed6ad05341c3626196b1" kindref="member">m_StrName</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" kindref="member">Name</ref>().c_str();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1ac431adb8472bdf81017a2111f68147d9" kindref="member">m_strFolderName</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a5263d568ee10c4f1bb352143a8fe40e3" kindref="member">m_dLastFrameIntervalTimeSec</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_interval_1aa83b2b192b2cdf562afb68a118f4ddeb" kindref="member">GetLastFrameIntervalTimeSec</ref>();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a2b0c5ce95db9b90d1145aec8af6b569b" kindref="member">m_iLastFrameIntervalEntries</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_interval_1a83ce0154483f4b782858becda70a6108" kindref="member">GetLastFrameIntervalEntries</ref>();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a912dce753588283b72cc25dfbab72338" kindref="member">m_bLastFrameClosed</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_interval_1abf524b8731c32cc6e6fba1617393a995" kindref="member">IsLastFrameClosed</ref>();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1aa4fbaf47041230588e80026115c7898b" kindref="member">m_crcID</ref><sp/>=<sp/>pInter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a5c9817470b83bdf4d63cd40216985f81" kindref="member">m_iKey</ref><sp/>=<sp/>iter-&gt;first;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vIntervals.push_back(<sp/>pDat<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="class_c_performance_timing_1a5bfd75b3a3c3933063244609888e2dfc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1adf4e577d676152b8799ad9cbdbc529c3" kindref="member">CPerformanceTiming::EnumerateAllCounters</ref>(<ref refid="namespace_performance_timing_1ac964deca5e0cd7c10b938682b5ec145b" kindref="member">PerformanceTiming::TCounterCloneArray</ref>&amp;<sp/>vAllCounters,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bOnlyIncludeTouched)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt32<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>.size();<sp/>ii++)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bOnlyIncludeTouched<sp/>||<sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>[ii]-&gt;IsTouched())</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>*<sp/>pCounter<sp/>=<sp/><ref refid="class_c_performance_timing_1a9a0bb7caaf0f1edd67af29b8ceccca57" kindref="member">m_vCounters</ref>[ii];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_counter_clone" kindref="compound">PerformanceTiming::CCounterClone</ref>*<sp/>pDat<sp/>=<sp/>PerformanceTiming::CCounterClone::NEW();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a1bb77e8cbe8e8a071b052db1cddc4cee" kindref="member">m_strName</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" kindref="member">Name</ref>().c_str();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1acc1561842690d5abc440daaf6c841645" kindref="member">m_strFolderName</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a9c3072ecaeffd814f9fdef0542ab5e93" kindref="member">m_crcID</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1ad9e560c4ce8a374bf0b698d268eee99f" kindref="member">m_uValue</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" kindref="member">GetValue</ref>();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a11cc0089ef431bae66a8cc5caaefc4f4" kindref="member">m_RunningTotal</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" kindref="member">GetValue</ref>();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1acb115d604b750864509f4da2d7fc2e07" kindref="member">m_bHistory</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAllCounters.push_back(<sp/>pDat<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UInt32<sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>.size();<sp/>ii++)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bOnlyIncludeTouched<sp/>||<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>[ii]-&gt;IsTouched())</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_history_counter" kindref="compound">PerformanceTiming::CHistoryCounter</ref>*<sp/>pCounter<sp/>=<sp/><ref refid="class_c_performance_timing_1ae8d42af48852decf661b38550d5b31a6" kindref="member">m_vHistoryCounters</ref>[ii];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_counter_clone" kindref="compound">PerformanceTiming::CCounterClone</ref>*<sp/>pDat<sp/>=<sp/>PerformanceTiming::CCounterClone::NEW();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a1bb77e8cbe8e8a071b052db1cddc4cee" kindref="member">m_strName</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" kindref="member">Name</ref>().c_str();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1acc1561842690d5abc440daaf6c841645" kindref="member">m_strFolderName</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a9c3072ecaeffd814f9fdef0542ab5e93" kindref="member">m_crcID</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1ad9e560c4ce8a374bf0b698d268eee99f" kindref="member">m_uValue</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" kindref="member">GetHistory</ref>().<ref refid="class_performance_timing_1_1_c_counter_history_1a0a764fc8ff4b798fca04a79d588a12ae" kindref="member">GetLastValue</ref>();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1aad07c21e84d1bd4aee019907b9a838a1" kindref="member">m_LastValueAdded</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" kindref="member">GetHistory</ref>().<ref refid="class_performance_timing_1_1_c_counter_history_1a0a764fc8ff4b798fca04a79d588a12ae" kindref="member">GetLastValue</ref>();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a11cc0089ef431bae66a8cc5caaefc4f4" kindref="member">m_RunningTotal</ref><sp/>=<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" kindref="member">GetHistory</ref>().<ref refid="class_performance_timing_1_1_c_counter_history_1a0a764fc8ff4b798fca04a79d588a12ae" kindref="member">GetLastValue</ref>();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pDat-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1acb115d604b750864509f4da2d7fc2e07" kindref="member">m_bHistory</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAllCounters.push_back(pDat);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="class_c_performance_timing_1ab01a87ccbdb82fba98e714b467c7af02" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1ab01a87ccbdb82fba98e714b467c7af02" kindref="member">CPerformanceTiming::BeginTrack</ref>()</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>(int)(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>.size());<sp/>++ii)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii])</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii]-&gt;BeginTrack();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1a3e714c73702b37645c49c29d91aa788f" kindref="member">m_LastTime</ref><sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="class_c_performance_timing_1a736e7e8b2284f459cf6088eb362e3789" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1a736e7e8b2284f459cf6088eb362e3789" kindref="member">CPerformanceTiming::EndTrack</ref>()</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>(int)(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>.size());<sp/>++ii)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii])</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii]-&gt;EndTrack();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="class_c_performance_timing_1af74447b0767444a5dda7dd6b1e9085ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_performance_timing_1af74447b0767444a5dda7dd6b1e9085ed" kindref="member">CPerformanceTiming::ForceDump</ref>()</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>(int)(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>.size());<sp/>++ii)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii])</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_performance_timing_1aefa629435715e9418aa14e3952f391ad" kindref="member">m_vSinks</ref>[ii]-&gt;ForceDump();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" refkind="member"><highlight class="normal"><ref refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" kindref="member">PerformanceTiming::CPerformanceStat::CPerformanceStat</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sName<sp/>)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_sName(<sp/>sName<sp/>)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_bTouched(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_performance_timing_1_1_c_performance_stat_1a0e2b11d7f9ce826ac5b9512f92a94340" kindref="member">m_FolderNameCRC</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" kindref="member">PerformanceTiming::CPerformanceStat::Name</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="755"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_sName;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" kindref="member">PerformanceTiming::CPerformanceStat::DoSetFolderName</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>szFolderName<sp/>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sFolderName.empty())</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName<sp/>=<sp/>szFolderName;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>m_FolderNameCRC<sp/>=<sp/><ref refid="namespace_performance_timing_1aaa1359d75567ed83fbfbfcfbfc7563d1" kindref="member">PerformanceTiming::CRCString</ref>(<sp/>m_sFolderName.c_str()<sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" kindref="member">PerformanceTiming::CPerformanceStat::DoSetFolderFlag</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iFlag)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>csDefaultName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Counter_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sFolderName.empty())</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName<sp/>=<sp/>csDefaultName;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp[4];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)tmp)<sp/>=<sp/>iFlag;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName.push_back(tmp[3]);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName.push_back(tmp[2]);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName.push_back(tmp[1]);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sFolderName.push_back(tmp[0]);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>m_FolderNameCRC<sp/>=<sp/><ref refid="namespace_performance_timing_1aaa1359d75567ed83fbfbfcfbfc7563d1" kindref="member">PerformanceTiming::CRCString</ref>(m_sFolderName.c_str());</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="class_performance_timing_1_1_c_interval_1a78e81d64e188c8544069f2d44bbfb15d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_1a78e81d64e188c8544069f2d44bbfb15d" kindref="member">PerformanceTiming::CInterval::GetIntervalPercentage</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="789"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fTotalElapsedTime<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/><ref refid="class_c_performance_timing_1a0cd9ac671cfeca01bd8fb12f948f6ba3" kindref="member">CPerformanceTiming::InstanceQuick</ref>()-&gt;<ref refid="class_c_performance_timing_1a884eea574a1bf703273f51715075b10b" kindref="member">GetTotalElapsedTime</ref>()<sp/>);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>100.0f<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_dTotalIntervalTimeSec)<sp/>/<sp/>fTotalElapsedTime;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="class_performance_timing_1_1_c_interval_1ac7dffd5c24210fa8b55f2fe59eb9b5e3" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_1ac7dffd5c24210fa8b55f2fe59eb9b5e3" kindref="member">PerformanceTiming::CInterval::Start</ref>()</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>Touch();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>++m_iDepth;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>1<sp/>==<sp/>m_iDepth<sp/>)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*SetFlag(<sp/>eIntervalFlag_Started<sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_EntryTime<sp/>=<sp/>GetPerformanceCounter();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EntryTime<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>!m_vChildren.empty()<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalArray::iterator<sp/>iterEnd<sp/>=<sp/>m_vChildren.end();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>PerformanceTiming::TIntervalArray::iterator<sp/>iter<sp/>=<sp/>m_vChildren.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CInterval*<sp/>pChild<sp/>=<sp/>(*iter);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pChild-&gt;m_dLastIntervalTimeSec<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pChild-&gt;m_dThisFrameIntervalTimeSec<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="class_performance_timing_1_1_c_interval_1a05192a46041bdca7c17ff4d95d239025" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_1a05192a46041bdca7c17ff4d95d239025" kindref="member">PerformanceTiming::CInterval::End</ref>()</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>Touch();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>--m_iDepth;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0<sp/>==<sp/>m_iDepth<sp/>)</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//UInt64<sp/>ExitTime<sp/>=<sp/>GetPerformanceCounter();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_dLastIntervalTimeSec<sp/>=<sp/>CounterToSeconds(ExitTime<sp/>-<sp/>m_EntryTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">UInt64</ref><sp/>ExitTime<sp/>=<sp/>timeGetTime();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ClearFlag(<sp/>eIntervalFlag_Started<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dLastIntervalTimeSec<sp/>=<sp/>(ExitTime<sp/>-<sp/>m_EntryTime)<sp/>*<sp/>0.001<ref refid="namespacemake_callback_1a0c646a8863d44327e020456c954f4b2d" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dMaxIntervalTimeSec<sp/>=<sp/>std::max&lt;Float64&gt;(<sp/>m_dMaxIntervalTimeSec,<sp/>m_dLastIntervalTimeSec<sp/>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dMinIntervalTimeSec<sp/>=<sp/>std::min&lt;Float64&gt;(<sp/>m_dMinIntervalTimeSec,<sp/>m_dLastIntervalTimeSec<sp/>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dTotalIntervalTimeSec<sp/>+=<sp/>m_dLastIntervalTimeSec;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iTotalIntervalEntries++;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dThisFrameIntervalTimeSec<sp/>+=<sp/>m_dLastIntervalTimeSec;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iThisFrameIntervalEntries++;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="class_c_interval_folder_set_1ac62dfb8037511cf7eab8bf1d4f0d0f2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_interval_folder_set_1ac62dfb8037511cf7eab8bf1d4f0d0f2f" kindref="member">CIntervalFolderSet::BuildFolderSets</ref>(<sp/>std::vector&lt;CIntervalFolderSet&gt;&amp;<sp/>vFolderSets,<sp/><ref refid="namespace_performance_timing_1a5b5f704d02e5edeabd1c6b97d4745ec1" kindref="member">PerformanceTiming::TConstIntervalArray</ref>&amp;<sp/>vAllIntervals<sp/>)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.clear();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.push_back(<sp/><ref refid="class_c_interval_folder_set" kindref="compound">CIntervalFolderSet</ref>(<sp/>NULL,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TConstIntervalArray::iterator<sp/>iterEnd<sp/>=<sp/>vAllIntervals.end();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>PerformanceTiming::TConstIntervalArray::iterator<sp/>iter<sp/>=<sp/>vAllIntervals.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter<sp/>)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval" kindref="compound">PerformanceTiming::CInterval</ref>*<sp/>pInterval<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!pInterval-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>()<sp/>)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets[0].AddInterval(<sp/>pInterval<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;CIntervalFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders<sp/>)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*iterFolders).FolderName()<sp/>&amp;&amp;<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>()<sp/>==<sp/>(*iterFolders).FolderNameCRC()<sp/>)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iterFolders).AddInterval(<sp/>pInterval<sp/>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInterval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pInterval<sp/>)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_interval_folder_set" kindref="compound">CIntervalFolderSet</ref><sp/>FolderSet(<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>(),<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>()<sp/>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FolderSet.<ref refid="class_c_interval_folder_set_1aea56b50dde178fafcf7a8321e356a829" kindref="member">AddInterval</ref>(<sp/>pInterval<sp/>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets.push_back(<sp/>FolderSet<sp/>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="class_c_interval_clone_folder_set_1a3a57560d3f4bc12e3c1d0d9e99d5ac5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_interval_clone_folder_set_1a3a57560d3f4bc12e3c1d0d9e99d5ac5e" kindref="member">CIntervalCloneFolderSet::BuildFolderSets</ref>(std::vector&lt;CIntervalCloneFolderSet&gt;&amp;<sp/>vFolderSets,<sp/><ref refid="namespace_performance_timing_1ac6707feaaa4f4727d7bf2f86f2539dbb" kindref="member">PerformanceTiming::TIntervalCloneArray</ref>&amp;<sp/>vAllIntervals)</highlight></codeline>
<codeline lineno="883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.clear();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.push_back(<ref refid="class_c_interval_clone_folder_set" kindref="compound">CIntervalCloneFolderSet</ref>(NULL,<sp/>0));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>PerformanceTiming::TIntervalCloneArray::iterator<sp/>iterEnd<sp/>=<sp/>vAllIntervals.end();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TIntervalCloneArray::iterator<sp/>iter<sp/>=<sp/>vAllIntervals.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_interval_clone" kindref="compound">PerformanceTiming::CIntervalClone</ref>*<sp/>pInterval<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1ae439b253e857d90fcd92397110e2c018" kindref="member">GetFolderName</ref>())</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets[0].AddInterval(pInterval);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;CIntervalCloneFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*iterFolders).FolderName()<sp/>&amp;&amp;<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a14f2280c29035aa7d6f9bdf78e503f60" kindref="member">GetFolderNameCRC</ref>()<sp/>==<sp/>(*iterFolders).FolderNameCRC())</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iterFolders).AddInterval(pInterval);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pInterval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pInterval)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_interval_clone_folder_set" kindref="compound">CIntervalCloneFolderSet</ref><sp/>FolderSet(pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1ae439b253e857d90fcd92397110e2c018" kindref="member">GetFolderName</ref>(),<sp/>pInterval-&gt;<ref refid="class_performance_timing_1_1_c_interval_clone_1a14f2280c29035aa7d6f9bdf78e503f60" kindref="member">GetFolderNameCRC</ref>());</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FolderSet.<ref refid="class_c_interval_clone_folder_set_1a95d18b5e3b8baa0248de5b291b177dbd" kindref="member">AddInterval</ref>(pInterval);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets.push_back(FolderSet);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="class_c_counter_folder_set_1a4cb313bd2345a049934ba5cbbf08d6d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_counter_folder_set_1a4cb313bd2345a049934ba5cbbf08d6d7" kindref="member">CCounterFolderSet::BuildFolderSets</ref>(std::vector&lt;CCounterFolderSet&gt;&amp;<sp/>vFolderSets,<sp/><ref refid="namespace_performance_timing_1a2f19e1a12beadfd5b60325a7f4ccd465" kindref="member">PerformanceTiming::TConstCounterArray</ref>&amp;<sp/>vAllCounters)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.clear();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.push_back(<ref refid="class_c_counter_folder_set" kindref="compound">CCounterFolderSet</ref>(NULL,<sp/>0));</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>build<sp/>our<sp/>folder<sp/>sets<sp/>to<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TConstCounterArray::iterator<sp/>iterEnd<sp/>=<sp/>vAllCounters.end();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TConstCounterArray::iterator<sp/>iter<sp/>=<sp/>vAllCounters.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_counter" kindref="compound">PerformanceTiming::CCounter</ref>*<sp/>pCounter<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>())</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets[0].AddCounter(pCounter);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;CCounterFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*iterFolders).FolderName()<sp/>&amp;&amp;<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>()<sp/>==<sp/>(*iterFolders).FolderNameCRC())</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iterFolders).AddCounter(pCounter);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCounter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pCounter)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_counter_folder_set" kindref="compound">CCounterFolderSet</ref><sp/>FolderSet(pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" kindref="member">GetFolderName</ref>(),<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" kindref="member">GetFolderNameCRC</ref>());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FolderSet.<ref refid="class_c_counter_folder_set_1a303dd451d80f7b8e73c7307168896a53" kindref="member">AddCounter</ref>(pCounter);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets.push_back(FolderSet);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="class_c_counter_clone_folder_set_1aa64f87bd85f688d65d313e89b55747d7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_counter_clone_folder_set_1aa64f87bd85f688d65d313e89b55747d7" kindref="member">CCounterCloneFolderSet::BuildFolderSets</ref>(std::vector&lt;CCounterCloneFolderSet&gt;&amp;<sp/>vFolderSets,<sp/><ref refid="namespace_performance_timing_1ac964deca5e0cd7c10b938682b5ec145b" kindref="member">PerformanceTiming::TCounterCloneArray</ref>&amp;<sp/>vAllCounters)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.clear();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>vFolderSets.push_back(<ref refid="class_c_counter_clone_folder_set" kindref="compound">CCounterCloneFolderSet</ref>(NULL,<sp/>0));</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>build<sp/>our<sp/>folder<sp/>sets<sp/>to<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerformanceTiming::TCounterCloneArray::iterator<sp/>iterEnd<sp/>=<sp/>vAllCounters.end();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PerformanceTiming::TCounterCloneArray::iterator<sp/>iter<sp/>=<sp/>vAllCounters.begin();<sp/>iter<sp/>!=<sp/>iterEnd;<sp/>++iter)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_performance_timing_1_1_c_counter_clone" kindref="compound">PerformanceTiming::CCounterClone</ref>*<sp/>pCounter<sp/>=<sp/>(*iter);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a4f84f4d698fb19c475c42c7d7e8fe8b6" kindref="member">GetFolderName</ref>())</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets[0].AddCounter(pCounter);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;CCounterCloneFolderSet&gt;::iterator<sp/>iterFolders<sp/>=<sp/>vFolderSets.begin();<sp/>iterFolders<sp/>!=<sp/>vFolderSets.end();<sp/>++iterFolders)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*iterFolders).FolderName()<sp/>&amp;&amp;<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a22609bc0840e3f0b5eacd80cd5f81078" kindref="member">GetFolderNameCRC</ref>()<sp/>==<sp/>(*iterFolders).FolderNameCRC())</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*iterFolders).AddCounter(pCounter);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCounter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pCounter)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_counter_clone_folder_set" kindref="compound">CCounterCloneFolderSet</ref><sp/>FolderSet(pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a4f84f4d698fb19c475c42c7d7e8fe8b6" kindref="member">GetFolderName</ref>(),<sp/>pCounter-&gt;<ref refid="class_performance_timing_1_1_c_counter_clone_1a22609bc0840e3f0b5eacd80cd5f81078" kindref="member">GetFolderNameCRC</ref>());</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FolderSet.<ref refid="class_c_counter_clone_folder_set_1a54fe5418f37d5a2b9ea8d75ddb26271a" kindref="member">AddCounter</ref>(pCounter);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vFolderSets.push_back(FolderSet);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.cpp"/>
  </compounddef>
</doxygen>
