<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="class_performance_timing_1_1_c_history_counter" kind="class" prot="public">
    <compoundname>PerformanceTiming::CHistoryCounter</compoundname>
    <basecompoundref refid="class_performance_timing_1_1_c_counter" prot="public" virt="non-virtual">PerformanceTiming::CCounter</basecompoundref>
    <basecompoundref refid="class_performance_timing_1_1_c_counter" prot="public" virt="non-virtual">PerformanceTiming::CCounter</basecompoundref>
    <includes refid="src_2_performance_timing_8h" local="no">PerformanceTiming.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_performance_timing_1_1_c_history_counter_1a0a7dd11c9867faf8228b271c5e6aba3f" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>CPerformanceTiming</definition>
        <argsstring></argsstring>
        <name>CPerformanceTiming</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="512" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" prot="private" static="no" mutable="no">
        <type><ref refid="class_performance_timing_1_1_c_counter_history" kindref="compound">CCounterHistory</ref>&lt; UInt32, UInt64 &gt;</type>
        <definition>CCounterHistory&lt; UInt32, UInt64 &gt; PerformanceTiming::CHistoryCounter::m_History</definition>
        <argsstring></argsstring>
        <name>m_History</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="526" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="526" bodyend="-1"/>
        <referencedby refid="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" compoundref="src_2_performance_timing_8h" startline="514" endline="524">AdvanceFrame</referencedby>
        <referencedby refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" compoundref="src_2_performance_timing_8h" startline="503" endline="506">GetHistory</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1a5e1e700b5d092fce767dcb9b4eef9749" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerformanceTiming::CHistoryCounter::CHistoryCounter</definition>
        <argsstring>(const std::string &amp;sName, UInt32 uiFlags)</argsstring>
        <name>CHistoryCounter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sName</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="498" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_performance_timing_1_1_c_counter_history" kindref="compound">CCounterHistory</ref>&lt; UInt32, UInt64 &gt; &amp;</type>
        <definition>const CCounterHistory&lt;UInt32, UInt64&gt;&amp; PerformanceTiming::CHistoryCounter::GetHistory</definition>
        <argsstring>() const </argsstring>
        <name>GetHistory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="503" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="503" bodyend="506"/>
        <references refid="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" compoundref="src_2_performance_timing_8h" startline="526">m_History</references>
        <referencedby refid="class_c_performance_timing_1a5bfd75b3a3c3933063244609888e2dfc" compoundref="src_2_performance_timing_8cpp" startline="677" endline="710">CPerformanceTiming::EnumerateAllCounters</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PerformanceTiming::CHistoryCounter::IsHistoryCounter</definition>
        <argsstring>() const </argsstring>
        <name>IsHistoryCounter</name>
        <reimplements refid="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4">IsHistoryCounter</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="508" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1a5e1e700b5d092fce767dcb9b4eef9749" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PerformanceTiming::CHistoryCounter::CHistoryCounter</definition>
        <argsstring>(const std::string &amp;sName, UInt32 uiFlags)</argsstring>
        <name>CHistoryCounter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sName</declname>
        </param>
        <param>
          <type>UInt32</type>
          <declname>uiFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="498" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_performance_timing_1_1_c_counter_history" kindref="compound">CCounterHistory</ref>&lt; UInt32, UInt64 &gt; &amp;</type>
        <definition>const CCounterHistory&lt;UInt32, UInt64&gt;&amp; PerformanceTiming::CHistoryCounter::GetHistory</definition>
        <argsstring>() const </argsstring>
        <name>GetHistory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="503" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="503" bodyend="506"/>
        <references refid="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" compoundref="src_2_performance_timing_8h" startline="526">m_History</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool PerformanceTiming::CHistoryCounter::IsHistoryCounter</definition>
        <argsstring>() const </argsstring>
        <name>IsHistoryCounter</name>
        <reimplements refid="class_performance_timing_1_1_c_counter_1a836a0111dfd6e7c49ca39f827349edc4">IsHistoryCounter</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="508" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="508" bodyend="508"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CHistoryCounter::AdvanceFrame</definition>
        <argsstring>()</argsstring>
        <name>AdvanceFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="514" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="514" bodyend="524"/>
        <references refid="class_performance_timing_1_1_c_counter_history_1a2a809d32c5ca3e9d99f345367f6050d9" compoundref="src_2_performance_timing_8h" startline="146" endline="155">PerformanceTiming::CCounterHistory&lt; TValueType, TSumType &gt;::AddToHistory</references>
        <references refid="_performacen_timing_mgr_8h_1a282820dcf883c4eff902816f24e608fea3d4a2275554f29eb1b451773409912c1" compoundref="_performacen_timing_mgr_8h" startline="11">eCounterFlags_ResetEachFrame</references>
        <references refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" compoundref="src_2_performance_timing_8h" startline="478" endline="481">PerformanceTiming::CCounter::HasFlagsSet</references>
        <references refid="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" compoundref="src_2_performance_timing_8h" startline="526">m_History</references>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">PerformanceTiming::CCounter::m_uValue</references>
      </memberdef>
      <memberdef kind="function" id="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PerformanceTiming::CHistoryCounter::AdvanceFrame</definition>
        <argsstring>()</argsstring>
        <name>AdvanceFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="514" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="514" bodyend="524"/>
        <references refid="class_performance_timing_1_1_c_counter_history_1a2a809d32c5ca3e9d99f345367f6050d9" compoundref="src_2_performance_timing_8h" startline="146" endline="155">PerformanceTiming::CCounterHistory&lt; TValueType, TSumType &gt;::AddToHistory</references>
        <references refid="_performacen_timing_mgr_8h_1a282820dcf883c4eff902816f24e608fea3d4a2275554f29eb1b451773409912c1" compoundref="_performacen_timing_mgr_8h" startline="11">eCounterFlags_ResetEachFrame</references>
        <references refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" compoundref="src_2_performance_timing_8h" startline="478" endline="481">PerformanceTiming::CCounter::HasFlagsSet</references>
        <references refid="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" compoundref="src_2_performance_timing_8h" startline="526">m_History</references>
        <references refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" compoundref="src_2_performance_timing_8h" startline="486">PerformanceTiming::CCounter::m_uValue</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A counter that tracks history </para>    </detaileddescription>
    <inheritancegraph>
      <node id="862">
        <label>PerformanceTiming::CCounter</label>
        <link refid="class_performance_timing_1_1_c_counter"/>
        <childnode refid="863" relation="public-inheritance">
        </childnode>
        <childnode refid="864" relation="public-inheritance">
        </childnode>
        <childnode refid="863" relation="public-inheritance">
        </childnode>
        <childnode refid="864" relation="public-inheritance">
        </childnode>
      </node>
      <node id="864">
        <label>ICounter</label>
        <link refid="class_i_counter"/>
      </node>
      <node id="861">
        <label>PerformanceTiming::CHistoryCounter</label>
        <link refid="class_performance_timing_1_1_c_history_counter"/>
        <childnode refid="862" relation="public-inheritance">
        </childnode>
        <childnode refid="862" relation="public-inheritance">
        </childnode>
      </node>
      <node id="863">
        <label>PerformanceTiming::CPerformanceStat</label>
        <link refid="class_performance_timing_1_1_c_performance_stat"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="866">
        <label>PerformanceTiming::CCounter</label>
        <link refid="class_performance_timing_1_1_c_counter"/>
        <childnode refid="867" relation="public-inheritance">
        </childnode>
        <childnode refid="870" relation="public-inheritance">
        </childnode>
        <childnode refid="867" relation="public-inheritance">
        </childnode>
        <childnode refid="870" relation="public-inheritance">
        </childnode>
      </node>
      <node id="870">
        <label>ICounter</label>
        <link refid="class_i_counter"/>
      </node>
      <node id="865">
        <label>PerformanceTiming::CHistoryCounter</label>
        <link refid="class_performance_timing_1_1_c_history_counter"/>
        <childnode refid="866" relation="public-inheritance">
        </childnode>
        <childnode refid="866" relation="public-inheritance">
        </childnode>
        <childnode refid="871" relation="usage">
          <edgelabel>m_History</edgelabel>
        </childnode>
      </node>
      <node id="869">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="871">
        <label>PerformanceTiming::CCounterHistory&lt; UInt32, UInt64 &gt;</label>
        <link refid="class_performance_timing_1_1_c_counter_history"/>
      </node>
      <node id="867">
        <label>PerformanceTiming::CPerformanceStat</label>
        <link refid="class_performance_timing_1_1_c_performance_stat"/>
        <childnode refid="868" relation="usage">
          <edgelabel>m_sFolderName</edgelabel>
          <edgelabel>m_sName</edgelabel>
        </childnode>
      </node>
      <node id="868">
        <label>std::string</label>
        <childnode refid="869" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="496" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="495" bodyend="527"/>
    <listofallmembers>
      <member refid="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Add</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a53a30d36a3c890fecfa8c5792de1dba8" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Add</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" prot="private" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>AdvanceFrame</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1a40fe9aee9086f43f878d71ad0330771b" prot="private" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>AdvanceFrame</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CCounter</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab2fa73ee815990f74966e7234ab0cd78" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CCounter</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CheckFlag</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a4f0e9c9b7081341af12099216b732cc9" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CheckFlag</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1a5e1e700b5d092fce767dcb9b4eef9749" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1a5e1e700b5d092fce767dcb9b4eef9749" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a424b2bbaa5f6457ea8990b33e943bddc" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1a0a7dd11c9867faf8228b271c5e6aba3f" prot="private" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>CPerformanceTiming</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Decrement</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1afa98a57c5f1445e285e514f641932a53" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Decrement</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>DoSetFolderFlag</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a007f1a93611053b600a6e50bfbc88d61" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>DoSetFolderFlag</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>DoSetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad9d23cd316f85d975cb7cb4cdfb30979" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>DoSetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetCriticalThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ab048d8112cf76ec4bdbe647c61cf9fdf" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetCriticalThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1ad29415a1240f66800c4330e2053c0dd1" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetFolderNameCRC</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a6cb5b9cb52e92cbd593b1fbb8a1a37cb" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetFolderNameCRC</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetHistory</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1ac089b9b3675c4934198a51250d329537" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetHistory</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1aa5d63880c689367d5703536f9e767e74" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetWarningThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a960f4071529661312f6cabd0d7655855" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>GetWarningThresholdMS</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>HardReset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ae5c3459a0fed610457a312ea0aeaa9a4" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>HardReset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>HasFlagsSet</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a8327ed8ecdea21403146d6de9294f25f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>HasFlagsSet</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Increment</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a314eccf6570ef3d8ee28810158b08b98" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Increment</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>IsHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1ab4670f7c3ad0f2bf02e9169dc30d6ef8" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>IsHistoryCounter</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a30c9f32df81a8b04a88ff77d4b1ed99f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>IsTouched</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a30c9f32df81a8b04a88ff77d4b1ed99f" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>IsTouched</name></member>
      <member refid="class_performance_timing_1_1_c_history_counter_1ab5e383f86f09055cc66190481c1e644a" prot="private" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>m_History</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a78559dbdd3753e77daa793fb820f623d" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>m_uCriticalThreshold</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a915910345af9d08427a2265f550664b2" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>m_uiFlags</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a3cf262a2a988069998f0ef837525b3d2" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>m_uValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1acc2b75761dbd842c4f4a0f64ad06ef49" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>m_uWarningThreshold</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a52826ace51151b5511dc91d2bff39a4a" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Name</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a757d210669b62d6ca1c1e9d94f81dc47" prot="public" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Name</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Reset</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a58a4b8def5c6a539d0e5c8035bc81553" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Reset</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>ResetTouch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a0d1bd25e48aca6da7830c315e0568181" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>ResetTouch</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a52abe54853cf495d4b524746c77b9a96" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1a590ef2c0bb1ad04bd432e6606867b5bb" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetFolderName</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetValue</name></member>
      <member refid="class_performance_timing_1_1_c_counter_1ad60d6b380bb7e437b0ddc999a6b30a38" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>SetValue</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Touch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a8759102951a2b02084f33c6565e1b9d4" prot="protected" virt="non-virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>Touch</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a24d2ef1fb91699902def98e91ff3bf28" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>~CPerformanceStat</name></member>
      <member refid="class_performance_timing_1_1_c_performance_stat_1a24d2ef1fb91699902def98e91ff3bf28" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>~CPerformanceStat</name></member>
      <member refid="class_i_counter_1a34d6a275e4004ac1b56bb96f87af95ef" prot="public" virt="virtual"><scope>PerformanceTiming::CHistoryCounter</scope><name>~ICounter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
