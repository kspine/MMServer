<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="class_json_1_1_value" kind="class" prot="public">
    <compoundname>Json::Value</compoundname>
    <includes refid="value_8h" local="no">value.h</includes>
    <innerclass refid="struct_json_1_1_value_1_1_comment_info" prot="private">Json::Value::CommentInfo</innerclass>
    <innerclass refid="class_json_1_1_value_1_1_c_z_string" prot="private">Json::Value::CZString</innerclass>
    <innerclass refid="union_json_1_1_value_1_1_value_holder" prot="private">Json::Value::ValueHolder</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_json_1_1_value_1ac61bab5a465848b57610379cc07995c3" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>typedef std::vector&lt;std::string&gt; Json::Value::Members</definition>
        <argsstring></argsstring>
        <name>Members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="165" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a341cdf2e01f8b3c5b7317aa2f0768c53" prot="public" static="no">
        <type><ref refid="class_json_1_1_value_iterator" kindref="compound">ValueIterator</ref></type>
        <definition>typedef ValueIterator Json::Value::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="166" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1af92282ca92b58b320debd486afb7696a" prot="public" static="no">
        <type><ref refid="class_json_1_1_value_const_iterator" kindref="compound">ValueConstIterator</ref></type>
        <definition>typedef ValueConstIterator Json::Value::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="167" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" prot="public" static="no">
        <type><ref refid="namespace_json_1a800fb90eb6ee8d5d62b600c06f87f7d4" kindref="member">Json::UInt</ref></type>
        <definition>typedef Json::UInt Json::Value::UInt</definition>
        <argsstring></argsstring>
        <name>UInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="168" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" prot="public" static="no">
        <type><ref refid="namespace_json_1a08122e8005b706d982e48cca1e2119c7" kindref="member">Json::Int</ref></type>
        <definition>typedef Json::Int Json::Value::Int</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="169" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" prot="public" static="no">
        <type><ref refid="namespace_json_1a01f20bce8f8229f38ff890168c0e6452" kindref="member">Json::UInt64</ref></type>
        <definition>typedef Json::UInt64 Json::Value::UInt64</definition>
        <argsstring></argsstring>
        <name>UInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="171" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" prot="public" static="no">
        <type><ref refid="namespace_json_1ab7b47d2905da3b4ae60e4e800ec9ae5f" kindref="member">Json::Int64</ref></type>
        <definition>typedef Json::Int64 Json::Value::Int64</definition>
        <argsstring></argsstring>
        <name>Int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="172" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" prot="public" static="no">
        <type><ref refid="namespace_json_1a218d880af853ce786cd985e82571d297" kindref="member">Json::LargestInt</ref></type>
        <definition>typedef Json::LargestInt Json::Value::LargestInt</definition>
        <argsstring></argsstring>
        <name>LargestInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="174" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" prot="public" static="no">
        <type><ref refid="namespace_json_1ae202ecad69725e23443f465e257456d0" kindref="member">Json::LargestUInt</ref></type>
        <definition>typedef Json::LargestUInt Json::Value::LargestUInt</definition>
        <argsstring></argsstring>
        <name>LargestUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="175" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" prot="public" static="no">
        <type><ref refid="namespace_json_1a8048e741f2177c3b5d9ede4a5b8c53c2" kindref="member">Json::ArrayIndex</ref></type>
        <definition>typedef Json::ArrayIndex Json::Value::ArrayIndex</definition>
        <argsstring></argsstring>
        <name>ArrayIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="176" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a08b6c80c3af7071d908dabf044de5388" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_json_1_1_value_1_1_c_z_string" kindref="compound">CZString</ref>, <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &gt;</type>
        <definition>typedef std::map&lt;CZString, Value&gt; Json::Value::ObjectValues</definition>
        <argsstring></argsstring>
        <name>ObjectValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="245" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_json_1_1_value_1ad016df56489e5d360735457afba2f649" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ValueIteratorBase</definition>
        <argsstring></argsstring>
        <name>ValueIteratorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="163" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_json_1_1_value_1a6d6e9ea6807e46d5b7ded66d3032f607" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::null</definition>
        <argsstring></argsstring>
        <name>null</name>
        <initializer>= reinterpret_cast&lt;const <ref refid="class_json_1_1_value" kindref="compound">Value</ref>&amp;&gt;(<ref refid="namespace_json_1ab30055b4bbd82aecaca57ccecd63bbe6" kindref="member">kNullRef</ref>)</initializer>
        <briefdescription>
<para>We regret this reference to a global instance; prefer the simpler <ref refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" kindref="member">Value()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="178" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::nullRef</definition>
        <argsstring></argsstring>
        <name>nullRef</name>
        <initializer>= <ref refid="class_json_1_1_value_1a6d6e9ea6807e46d5b7ded66d3032f607" kindref="member">null</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>just a kludge for binary-compatibility; same as null </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="179" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="179" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a28282c9b76fa031eba7a1843c47c16fe" compoundref="json__value_8cpp" startline="1009" endline="1012">get</referencedby>
        <referencedby refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" compoundref="json__value_8cpp" startline="917" endline="931">operator[]</referencedby>
        <referencedby refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" compoundref="json__value_8cpp" startline="1102" endline="1112">removeMember</referencedby>
        <referencedby refid="class_json_1_1_path_1ae1d05fa985a6ee3c57f2b8ed186b5982" compoundref="json__value_8cpp" startline="1480" endline="1501">Json::Path::resolve</referencedby>
        <referencedby refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1af91df130daa50dd43d2cd89e6ee67706" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" kindref="member">LargestInt</ref></type>
        <definition>const LargestInt Json::Value::minLargestInt</definition>
        <argsstring></argsstring>
        <name>minLargestInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" kindref="member">LargestInt</ref>(~(<ref refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" kindref="member">LargestUInt</ref>(-1) / 2))</initializer>
        <briefdescription>
<para>Minimum signed integer value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="181" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="181" bodyend="-1"/>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="563" endline="603">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1545" endline="1583">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" compoundref="json__writer_8cpp" startline="100" endline="114">Json::valueToString</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a8b4977696f13296fa8755c7953fafb2f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" kindref="member">LargestInt</ref></type>
        <definition>const LargestInt Json::Value::maxLargestInt</definition>
        <argsstring></argsstring>
        <name>maxLargestInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" kindref="member">LargestInt</ref>(<ref refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" kindref="member">LargestUInt</ref>(-1) / 2)</initializer>
        <briefdescription>
<para>Maximum signed integer value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="183" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="183" bodyend="-1"/>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="563" endline="603">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1abd9c650f70d9434f98f9025e2e2faf2d" compoundref="json__writer_8cpp" startline="100" endline="114">Json::valueToString</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a8ddb32d9d55fa5323ae5135639dc2e31" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" kindref="member">LargestUInt</ref></type>
        <definition>const LargestUInt Json::Value::maxLargestUInt</definition>
        <argsstring></argsstring>
        <name>maxLargestUInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" kindref="member">LargestUInt</ref>(-1)</initializer>
        <briefdescription>
<para>Maximum unsigned integer value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="185" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="185" bodyend="-1"/>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="563" endline="603">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1545" endline="1583">Json::OurReader::decodeNumber</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref></type>
        <definition>const Int Json::Value::minInt</definition>
        <argsstring></argsstring>
        <name>minInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref>(~(<ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref>(-1) / 2))</initializer>
        <briefdescription>
<para>Minimum signed int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="188" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="188" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref></type>
        <definition>const Int Json::Value::maxInt</definition>
        <argsstring></argsstring>
        <name>maxInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref>(<ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref>(-1) / 2)</initializer>
        <briefdescription>
<para>Maximum signed int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="190" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="190" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</referencedby>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="563" endline="603">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1545" endline="1583">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" compoundref="json__value_8cpp" startline="102" endline="122">Json::duplicateAndPrefixStringValue</referencedby>
        <referencedby refid="namespace_json_1a678ac3a60cd70ec0fb4c9abfd40eb0c4" compoundref="json__value_8cpp" startline="82" endline="98">Json::duplicateStringValue</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref></type>
        <definition>const UInt Json::Value::maxUInt</definition>
        <argsstring></argsstring>
        <name>maxUInt</name>
        <initializer>= <ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref>(-1)</initializer>
        <briefdescription>
<para>Maximum unsigned int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="192" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="192" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" compoundref="json__value_8cpp" startline="671" endline="691">asUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a815ef899bc312c93bc426511acfe31a7" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref></type>
        <definition>const Int64 Json::Value::minInt64</definition>
        <argsstring></argsstring>
        <name>minInt64</name>
        <initializer>= <ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref>(~(<ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref>(-1) / 2))</initializer>
        <briefdescription>
<para>Minimum signed 64 bits int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="196" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="196" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a4492634870b8c5709ce967b384ac6006" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref></type>
        <definition>const Int64 Json::Value::maxInt64</definition>
        <argsstring></argsstring>
        <name>maxInt64</name>
        <initializer>= <ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref>(<ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref>(-1) / 2)</initializer>
        <briefdescription>
<para>Maximum signed 64 bits int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="198" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="198" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ae1eb89c305c39516696ff305cffa01da" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref></type>
        <definition>const UInt64 Json::Value::maxUInt64</definition>
        <argsstring></argsstring>
        <name>maxUInt64</name>
        <initializer>= <ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref>(-1)</initializer>
        <briefdescription>
<para>Maximum unsigned 64 bits int value that can be stored in a <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="200" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="200" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" compoundref="json__value_8cpp" startline="716" endline="735">asUInt64</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151" prot="private" static="no" mutable="no">
        <type>union <ref refid="union_json_1_1_value_1_1_value_holder" kindref="compound">Json::Value::ValueHolder</ref></type>
        <definition>union Json::Value::ValueHolder  Json::Value::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="593" column="1"/>
        <referencedby refid="class_json_1_1_value_1a7402c797285c020566c3db5f8ae4e940" compoundref="json__value_8cpp" startline="798" endline="815">asBool</referencedby>
        <referencedby refid="class_json_1_1_value_1a5b7da48b163bcec63b1424f1608b7da6" compoundref="json__value_8cpp" startline="595" endline="603">asCString</referencedby>
        <referencedby refid="class_json_1_1_value_1a33434ed1c0217a34d04c95fa5342fd37" compoundref="json__value_8cpp" startline="754" endline="774">asDouble</referencedby>
        <referencedby refid="class_json_1_1_value_1ac2128d7080499daf8c5b1c71da243f63" compoundref="json__value_8cpp" startline="776" endline="796">asFloat</referencedby>
        <referencedby refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" compoundref="json__value_8cpp" startline="614" endline="637">asString</referencedby>
        <referencedby refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" compoundref="json__value_8cpp" startline="671" endline="691">asUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" compoundref="json__value_8cpp" startline="716" endline="735">asUInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1ac12df0d6980600c5bac908ed0f64856e" compoundref="json__value_8cpp" startline="1348" endline="1359">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" compoundref="json__value_8cpp" startline="883" endline="897">clear</referencedby>
        <referencedby refid="class_json_1_1_value_1a596da1926b2f2a4056bff2edb713eb0b" compoundref="json__value_8cpp" startline="1361" endline="1372">end</referencedby>
        <referencedby refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</referencedby>
        <referencedby refid="class_json_1_1_value_1a30fa08af88f2d0a038b22ba9f4e88b2a" compoundref="json__value_8cpp" startline="1168" endline="1183">getMemberNames</referencedby>
        <referencedby refid="class_json_1_1_value_1a1e0263113ae247a632afac43ebc4149f" compoundref="json__value_8cpp" startline="605" endline="612">getString</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</referencedby>
        <referencedby refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" compoundref="json__value_8cpp" startline="1269" endline="1287">isUInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1af0ad8aa027575c3277296458f3fb7b0a" compoundref="json__value_8cpp" startline="497" endline="541">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a14363dda23a6ae2def9afd1590ae85d3" compoundref="json__value_8cpp" startline="549" endline="591">operator==</referencedby>
        <referencedby refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" compoundref="json__value_8cpp" startline="917" endline="931">operator[]</referencedby>
        <referencedby refid="class_json_1_1_value_1ae9e67e08a85a2f3be3396ec0f4c47f65" compoundref="json__value_8cpp" startline="1118" endline="1139">removeIndex</referencedby>
        <referencedby refid="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" compoundref="json__value_8cpp" startline="1081" endline="1093">removeMember</referencedby>
        <referencedby refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" compoundref="json__value_8cpp" startline="899" endline="915">resize</referencedby>
        <referencedby refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</referencedby>
        <referencedby refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</referencedby>
        <referencedby refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="470" endline="478">swapPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</referencedby>
        <referencedby refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" compoundref="json__value_8cpp" startline="441" endline="463">~Value</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
        <definition>ValueType Json::Value::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <bitfield> 8</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="594" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="594" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a7402c797285c020566c3db5f8ae4e940" compoundref="json__value_8cpp" startline="798" endline="815">asBool</referencedby>
        <referencedby refid="class_json_1_1_value_1a5b7da48b163bcec63b1424f1608b7da6" compoundref="json__value_8cpp" startline="595" endline="603">asCString</referencedby>
        <referencedby refid="class_json_1_1_value_1a33434ed1c0217a34d04c95fa5342fd37" compoundref="json__value_8cpp" startline="754" endline="774">asDouble</referencedby>
        <referencedby refid="class_json_1_1_value_1ac2128d7080499daf8c5b1c71da243f63" compoundref="json__value_8cpp" startline="776" endline="796">asFloat</referencedby>
        <referencedby refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" compoundref="json__value_8cpp" startline="614" endline="637">asString</referencedby>
        <referencedby refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" compoundref="json__value_8cpp" startline="671" endline="691">asUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" compoundref="json__value_8cpp" startline="716" endline="735">asUInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1ac12df0d6980600c5bac908ed0f64856e" compoundref="json__value_8cpp" startline="1348" endline="1359">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" compoundref="json__value_8cpp" startline="883" endline="897">clear</referencedby>
        <referencedby refid="class_json_1_1_value_1a596da1926b2f2a4056bff2edb713eb0b" compoundref="json__value_8cpp" startline="1361" endline="1372">end</referencedby>
        <referencedby refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</referencedby>
        <referencedby refid="class_json_1_1_value_1a30fa08af88f2d0a038b22ba9f4e88b2a" compoundref="json__value_8cpp" startline="1168" endline="1183">getMemberNames</referencedby>
        <referencedby refid="class_json_1_1_value_1a1e0263113ae247a632afac43ebc4149f" compoundref="json__value_8cpp" startline="605" endline="612">getString</referencedby>
        <referencedby refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</referencedby>
        <referencedby refid="class_json_1_1_value_1ac8c898f93543e55b67418f94bced20af" compoundref="json__value_8cpp" startline="1303" endline="1303">isArray</referencedby>
        <referencedby refid="class_json_1_1_value_1a3c3716cc7a0216cb1b654bb8f61c8d13" compoundref="json__value_8cpp" startline="1217" endline="1217">isBool</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1a0ea567fa51fc808851698bef59b43626" compoundref="json__value_8cpp" startline="1297" endline="1297">isDouble</referencedby>
        <referencedby refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</referencedby>
        <referencedby refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" compoundref="json__value_8cpp" startline="1215" endline="1215">isNull</referencedby>
        <referencedby refid="class_json_1_1_value_1a80cffaa0402b80317c0437216bbb6d92" compoundref="json__value_8cpp" startline="1305" endline="1305">isObject</referencedby>
        <referencedby refid="class_json_1_1_value_1a06c01d7c1e8151a5844b595ab00f46c7" compoundref="json__value_8cpp" startline="1301" endline="1301">isString</referencedby>
        <referencedby refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" compoundref="json__value_8cpp" startline="1269" endline="1287">isUInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1af0ad8aa027575c3277296458f3fb7b0a" compoundref="json__value_8cpp" startline="497" endline="541">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a14363dda23a6ae2def9afd1590ae85d3" compoundref="json__value_8cpp" startline="549" endline="591">operator==</referencedby>
        <referencedby refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" compoundref="json__value_8cpp" startline="917" endline="931">operator[]</referencedby>
        <referencedby refid="class_json_1_1_value_1ae9e67e08a85a2f3be3396ec0f4c47f65" compoundref="json__value_8cpp" startline="1118" endline="1139">removeIndex</referencedby>
        <referencedby refid="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" compoundref="json__value_8cpp" startline="1081" endline="1093">removeMember</referencedby>
        <referencedby refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" compoundref="json__value_8cpp" startline="899" endline="915">resize</referencedby>
        <referencedby refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</referencedby>
        <referencedby refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</referencedby>
        <referencedby refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="470" endline="478">swapPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" compoundref="json__value_8cpp" startline="487" endline="487">type</referencedby>
        <referencedby refid="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" compoundref="json__value_8cpp" startline="389" endline="431">Value</referencedby>
        <referencedby refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" compoundref="json__value_8cpp" startline="441" endline="463">~Value</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Json::Value::allocated_</definition>
        <argsstring></argsstring>
        <name>allocated_</name>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="595" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="595" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a5b7da48b163bcec63b1424f1608b7da6" compoundref="json__value_8cpp" startline="595" endline="603">asCString</referencedby>
        <referencedby refid="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" compoundref="json__value_8cpp" startline="614" endline="637">asString</referencedby>
        <referencedby refid="class_json_1_1_value_1a1e0263113ae247a632afac43ebc4149f" compoundref="json__value_8cpp" startline="605" endline="612">getString</referencedby>
        <referencedby refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</referencedby>
        <referencedby refid="class_json_1_1_value_1af0ad8aa027575c3277296458f3fb7b0a" compoundref="json__value_8cpp" startline="497" endline="541">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a14363dda23a6ae2def9afd1590ae85d3" compoundref="json__value_8cpp" startline="549" endline="591">operator==</referencedby>
        <referencedby refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="470" endline="478">swapPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" compoundref="json__value_8cpp" startline="389" endline="431">Value</referencedby>
        <referencedby refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" compoundref="json__value_8cpp" startline="441" endline="463">~Value</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" prot="private" static="no" mutable="no">
        <type><ref refid="struct_json_1_1_value_1_1_comment_info" kindref="compound">CommentInfo</ref> *</type>
        <definition>CommentInfo* Json::Value::comments_</definition>
        <argsstring></argsstring>
        <name>comments_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="597" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="597" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1aa1e105b5d7f55d6e42f4fb2f3674116f" compoundref="json__value_8cpp" startline="1329" endline="1333">getComment</referencedby>
        <referencedby refid="class_json_1_1_value_1a06567a00363cab9601be7e31336db03a" compoundref="json__value_8cpp" startline="1325" endline="1327">hasComment</referencedby>
        <referencedby refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</referencedby>
        <referencedby refid="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" compoundref="json__value_8cpp" startline="1307" endline="1315">setComment</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="480" endline="485">swap</referencedby>
        <referencedby refid="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" compoundref="json__value_8cpp" startline="389" endline="431">Value</referencedby>
        <referencedby refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" compoundref="json__value_8cpp" startline="441" endline="463">~Value</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Json::Value::start_</definition>
        <argsstring></argsstring>
        <name>start_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="601" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="601" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" compoundref="json__value_8cpp" startline="883" endline="897">clear</referencedby>
        <referencedby refid="class_json_1_1_value_1a10142eda11ae0b1caecbcc9f436854d1" compoundref="json__value_8cpp" startline="1339" endline="1339">getOffsetStart</referencedby>
        <referencedby refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</referencedby>
        <referencedby refid="class_json_1_1_value_1a6d741407c3d784360c200f181b0d6d64" compoundref="json__value_8cpp" startline="1335" endline="1335">setOffsetStart</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="480" endline="485">swap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Json::Value::limit_</definition>
        <argsstring></argsstring>
        <name>limit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="602" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="602" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" compoundref="json__value_8cpp" startline="883" endline="897">clear</referencedby>
        <referencedby refid="class_json_1_1_value_1acd7114469bc39368e9d93c29b54d8c8f" compoundref="json__value_8cpp" startline="1341" endline="1341">getOffsetLimit</referencedby>
        <referencedby refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</referencedby>
        <referencedby refid="class_json_1_1_value_1ac6d858b5fd4d5fe6ca84f697def8c5ea" compoundref="json__value_8cpp" startline="1337" endline="1337">setOffsetLimit</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="480" endline="485">swap</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(ValueType type=nullValue)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" kindref="member">nullValue</ref></defval>
        </param>
        <briefdescription>
<para>Create a default <ref refid="class_json_1_1_value" kindref="compound">Value</ref> of the given type. </para>        </briefdescription>
        <detaileddescription>
<para>This is a very useful constructor. To create an empty array, pass arrayValue. To create an empty object, pass objectValue. Another <ref refid="class_json_1_1_value" kindref="compound">Value</ref> can then be set to this one by assignment. This is useful since <ref refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" kindref="member">clear()</ref> and <ref refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" kindref="member">resize()</ref> will not alter types. <verbatim>Examples:
</verbatim> <programlisting><codeline><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref><sp/>null_value;<sp/></highlight><highlight class="comment">//<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref><sp/>arr_value(<ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" kindref="member">Json::arrayValue</ref>);<sp/></highlight><highlight class="comment">//<sp/>[]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref><sp/>obj_value(<ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" kindref="member">Json::objectValue</ref>);<sp/></highlight><highlight class="comment">//<sp/>{}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="267" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="303" bodyend="328"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" compoundref="json__value_8cpp" startline="917" endline="931">operator[]</referencedby>
        <referencedby refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" compoundref="json__value_8cpp" startline="899" endline="915">resize</referencedby>
        <referencedby refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4744ae571fcf34f4b16a2257b3b3b585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(Int value)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="268" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="330" bodyend="333"/>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae67a857b01286e3499a87e95be848d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(UInt value)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="269" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="335" bodyend="338"/>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab1cdc3d9a4d4cc03fa01439d43ceb1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(Int64 value)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="271" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="340" bodyend="343"/>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8adda58d5ae17bf7ca6a53bab4a7b69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(UInt64 value)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="272" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="344" bodyend="347"/>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a32228cc84d83200cca8441451997996c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(double value)</argsstring>
        <name>Value</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="274" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="350" bodyend="353"/>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ad87b849356816aca75995dd07302e49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const char *value)</argsstring>
        <name>Value</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Copy til first 0. (NULL causes to seg-fault.) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="275" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="355" bodyend="358"/>
        <references refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" compoundref="json__value_8cpp" startline="102" endline="122">Json::duplicateAndPrefixStringValue</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a39fa09d1902efbd4350e1236db920571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const char *begin, const char *end)</argsstring>
        <name>Value</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Copy all, incl zeroes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="276" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="360" bodyend="364"/>
        <references refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" compoundref="json__value_8cpp" startline="102" endline="122">Json::duplicateAndPrefixStringValue</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a081830e95f88a37054da7e46c65b0766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const StaticString &amp;value)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="class_json_1_1_static_string" kindref="compound">StaticString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a value from a static string. </para>        </briefdescription>
        <detaileddescription>
<para>Like other value string constructor but do not duplicate the string for internal storage. The given string must remain alive after the call to this constructor. <simplesect kind="note"><para>This works only for null-terminated strings. (We cannot change the size of this class, so we have nowhere to store the length, which might be computed later for various operations.)</para></simplesect>
Example of usage: <programlisting><codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/>StaticString<sp/>foo(</highlight><highlight class="stringliteral">&quot;some<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref><sp/>aValue(foo);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="292" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="372" bodyend="375"/>
        <references refid="class_json_1_1_static_string_1ab86fc6a3183adf12fdba4b370acf1754" compoundref="value_8h" startline="122" endline="122">Json::StaticString::c_str</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa4501dd4edf3ce3d5145fc656f088b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>Value</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Copy data() til <ref refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" kindref="member">size()</ref>. Embedded zeroes too. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="293" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="366" bodyend="370"/>
        <references refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" compoundref="json__value_8cpp" startline="102" endline="122">Json::duplicateAndPrefixStringValue</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a350a31ea4a30d384994b0bc010b17495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(bool value)</argsstring>
        <name>Value</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="297" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="384" bodyend="387"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" compoundref="json__value_8cpp" startline="960" endline="966">initBasic</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Deep copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="299" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="389" bodyend="431"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="struct_json_1_1_value_1_1_comment_info_1a020f19c7098bab8ec8fec14cd1a5afb9" compoundref="value_8h" startline="574">Json::Value::CommentInfo::comment_</references>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="namespace_json_1a9795a09a0141d1f12d307c4386aeaee6" compoundref="json__value_8cpp" startline="102" endline="122">Json::duplicateAndPrefixStringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351abcbd3eb00417335e094e4a03379659b5" compoundref="value_8h" startline="94">Json::numberOfCommentPlacement</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="struct_json_1_1_value_1_1_comment_info_1a4d01c2cd8c07995969c5d636dfd4fa8c" compoundref="json__value_8cpp" startline="194" endline="205">Json::Value::CommentInfo::setComment</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::~Value</definition>
        <argsstring>()</argsstring>
        <name>~Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="304" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="441" bodyend="463"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="namespace_json_1acf8dd162c01e37846e129556c50e4037" compoundref="json__value_8cpp" startline="137" endline="137">Json::releaseStringValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a795acb28772da4c5d85ae8f4af36c69f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator=</definition>
        <argsstring>(Value other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deep copy, then swap(other). <simplesect kind="note"><para>Over-write existing comments. To preserve comments, use <ref refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" kindref="member">swapPayload()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="308" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="465" bodyend="468"/>
        <references refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="480" endline="485">swap</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::swap</definition>
        <argsstring>(Value &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap everything. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="310" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="480" bodyend="485"/>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" compoundref="value_8h" startline="602">limit_</references>
        <references refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" compoundref="value_8h" startline="601">start_</references>
        <references refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="470" endline="478">swapPayload</references>
        <referencedby refid="class_json_1_1_value_1_1_c_z_string_1a6513ff431b0593d5744868dfee739f7b" compoundref="json__value_8cpp" startline="255" endline="258">Json::Value::CZString::operator=</referencedby>
        <referencedby refid="class_json_1_1_value_1a795acb28772da4c5d85ae8f4af36c69f" compoundref="json__value_8cpp" startline="465" endline="468">operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::swapPayload</definition>
        <argsstring>(Value &amp;other)</argsstring>
        <name>swapPayload</name>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap values but leave comments and source offsets in place. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="312" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="470" bodyend="478"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="605" endline="613">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1585" endline="1593">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="553" endline="561">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1535" endline="1543">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="627" endline="636">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1631" endline="1640">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1afd9a30c0af205c9f327613f486fae6b8" compoundref="json__reader_8cpp" startline="515" endline="551">Json::Reader::readArray</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" compoundref="json__reader_8cpp" startline="1497" endline="1533">Json::OurReader::readArray</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="459" endline="513">Json::Reader::readObject</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1435" endline="1495">Json::OurReader::readObject</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="160" endline="242">Json::Reader::readValue</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="1090" endline="1191">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="480" endline="485">swap</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
        <definition>ValueType Json::Value::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="314" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="487" bodyend="487"/>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af0ad8aa027575c3277296458f3fb7b0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&lt;</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare payload only, not comments etc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="317" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="497" bodyend="541"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afb99dd3628fe44244b32007f9b4f369a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&lt;=</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="318" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="543" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1acc13fc47d55abd6e2327b090b83d2911" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&gt;=</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="319" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="545" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a3124a26067bdfde9571bc89527fc6931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&gt;</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="320" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="547" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a14363dda23a6ae2def9afd1590ae85d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator==</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="321" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="549" bodyend="591"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ad0f12d2a4ab74bbef08a05504b2cb81d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator!=</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="322" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="593" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a899214ed2253d3f4f061b922b0e622b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Json::Value::compare</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="323" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="489" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5b7da48b163bcec63b1424f1608b7da6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Json::Value::asCString</definition>
        <argsstring>() const </argsstring>
        <name>asCString</name>
        <briefdescription>
<para>Embedded zeroes could cause you trouble! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="325" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="595" bodyend="603"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_world_server_1aaf8647e224c4eb268fb4d46a14bb4d3e" compoundref="_world_server_2_src_2_se_http_process_8cpp" startline="103" endline="159">WorldServer::ProcessHS_QueryNearestRaceInfoRet</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Json::Value::asString</definition>
        <argsstring>() const </argsstring>
        <name>asString</name>
        <briefdescription>
<para>Embedded zeroes are possible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="326" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="614" bodyend="637"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <references refid="namespace_json_1a5d3eba6789f9a9c1ab563ff8b4a5090f" compoundref="json__writer_8cpp" startline="126" endline="128">Json::valueToString</references>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="459" endline="513">Json::Reader::readObject</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1435" endline="1495">Json::OurReader::readObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a1e0263113ae247a632afac43ebc4149f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::getString</definition>
        <argsstring>(char const **begin, char const **end) const </argsstring>
        <name>getString</name>
        <param>
          <type>char const **</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get raw char* of string-value. <simplesect kind="return"><para>false if !string. (Seg-fault if str or end are NULL.) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="330" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="605" bodyend="612"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="123" endline="134">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="591">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" kindref="member">Int</ref></type>
        <definition>Value::Int Json::Value::asInt</definition>
        <argsstring>() const </argsstring>
        <name>asInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="335" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="649" bodyend="669"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="57" endline="59">Json::InRange</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" compoundref="value_8h" startline="190">maxInt</references>
        <references refid="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" compoundref="value_8h" startline="188">minInt</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a3786bb100c5cf9a98eb6d13784968956" compoundref="json__value_8cpp" startline="738" endline="744">asLargestInt</referencedby>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
        <referencedby refid="class_json_1_1_char_reader_builder_1a81da7da750111321ff14baf0f0a4c8ae" compoundref="json__reader_8cpp" startline="1919" endline="1933">Json::CharReaderBuilder::newCharReader</referencedby>
        <referencedby refid="class_http_server_1ac78f56a8a81cf69fdffcf2e568d5afd4" compoundref="_se_http_resp_process_8cpp" startline="3" endline="25">HttpServer::ProcessHttp_QueryFreeHeroListRet</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">UInt</ref></type>
        <definition>Value::UInt Json::Value::asUInt</definition>
        <argsstring>() const </argsstring>
        <name>asUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="336" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="671" bodyend="691"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="57" endline="59">Json::InRange</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" compoundref="value_8h" startline="192">maxUInt</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a692b88345a745b2f89ca5d94b52e94d4" compoundref="json__value_8cpp" startline="746" endline="752">asLargestUInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" kindref="member">Int64</ref></type>
        <definition>Value::Int64 Json::Value::asInt64</definition>
        <argsstring>() const </argsstring>
        <name>asInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="338" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="695" bodyend="714"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="57" endline="59">Json::InRange</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="class_json_1_1_value_1a4492634870b8c5709ce967b384ac6006" compoundref="value_8h" startline="198">maxInt64</references>
        <references refid="class_json_1_1_value_1a815ef899bc312c93bc426511acfe31a7" compoundref="value_8h" startline="196">minInt64</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a3786bb100c5cf9a98eb6d13784968956" compoundref="json__value_8cpp" startline="738" endline="744">asLargestInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" kindref="member">UInt64</ref></type>
        <definition>Value::UInt64 Json::Value::asUInt64</definition>
        <argsstring>() const </argsstring>
        <name>asUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="339" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="716" bodyend="735"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="57" endline="59">Json::InRange</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" compoundref="json__value_8cpp" startline="1269" endline="1287">isUInt64</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="class_json_1_1_value_1ae1eb89c305c39516696ff305cffa01da" compoundref="value_8h" startline="200">maxUInt64</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a692b88345a745b2f89ca5d94b52e94d4" compoundref="json__value_8cpp" startline="746" endline="752">asLargestUInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a3786bb100c5cf9a98eb6d13784968956" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" kindref="member">LargestInt</ref></type>
        <definition>LargestInt Json::Value::asLargestInt</definition>
        <argsstring>() const </argsstring>
        <name>asLargestInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="341" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="738" bodyend="744"/>
        <references refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</references>
        <references refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</references>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a692b88345a745b2f89ca5d94b52e94d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" kindref="member">LargestUInt</ref></type>
        <definition>LargestUInt Json::Value::asLargestUInt</definition>
        <argsstring>() const </argsstring>
        <name>asLargestUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="342" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="746" bodyend="752"/>
        <references refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" compoundref="json__value_8cpp" startline="671" endline="691">asUInt</references>
        <references refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" compoundref="json__value_8cpp" startline="716" endline="735">asUInt64</references>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac2128d7080499daf8c5b1c71da243f63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Json::Value::asFloat</definition>
        <argsstring>() const </argsstring>
        <name>asFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="343" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="776" bodyend="796"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a33434ed1c0217a34d04c95fa5342fd37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Json::Value::asDouble</definition>
        <argsstring>() const </argsstring>
        <name>asDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="344" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="754" bodyend="774"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7402c797285c020566c3db5f8ae4e940" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::asBool</definition>
        <argsstring>() const </argsstring>
        <name>asBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="345" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="798" bodyend="815"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1a81da7da750111321ff14baf0f0a4c8ae" compoundref="json__reader_8cpp" startline="1919" endline="1933">Json::CharReaderBuilder::newCharReader</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isNull</definition>
        <argsstring>() const </argsstring>
        <name>isNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="347" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1215" bodyend="1215"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" compoundref="json__value_8cpp" startline="874" endline="879">empty</referencedby>
        <referencedby refid="class_json_1_1_value_1a021ab0d15a807fbe051446c9c545ab61" compoundref="json__value_8cpp" startline="881" endline="881">operator!</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a3c3716cc7a0216cb1b654bb8f61c8d13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isBool</definition>
        <argsstring>() const </argsstring>
        <name>isBool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="348" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1217" bodyend="1217"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isInt</definition>
        <argsstring>() const </argsstring>
        <name>isInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="349" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1219" bodyend="1232"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1210" endline="1213">Json::IsIntegral</references>
        <references refid="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" compoundref="value_8h" startline="190">maxInt</references>
        <references refid="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" compoundref="value_8h" startline="188">minInt</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" compoundref="json__value_8cpp" startline="649" endline="669">asInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isInt64</definition>
        <argsstring>() const </argsstring>
        <name>isInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="350" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1249" bodyend="1267"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1210" endline="1213">Json::IsIntegral</references>
        <references refid="class_json_1_1_value_1a4492634870b8c5709ce967b384ac6006" compoundref="value_8h" startline="198">maxInt64</references>
        <references refid="class_json_1_1_value_1a815ef899bc312c93bc426511acfe31a7" compoundref="value_8h" startline="196">minInt64</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" compoundref="json__value_8cpp" startline="695" endline="714">asInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isUInt</definition>
        <argsstring>() const </argsstring>
        <name>isUInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="351" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1234" bodyend="1247"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1210" endline="1213">Json::IsIntegral</references>
        <references refid="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" compoundref="value_8h" startline="192">maxUInt</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="588">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" compoundref="json__value_8cpp" startline="671" endline="691">asUInt</referencedby>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
        <referencedby refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isUInt64</definition>
        <argsstring>() const </argsstring>
        <name>isUInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="352" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1269" bodyend="1287"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="587">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1210" endline="1213">Json::IsIntegral</references>
        <references refid="namespace_json_1aecc0306aa526f25c5156f842182fb7fb" compoundref="json__value_8cpp" startline="49">Json::maxUInt64AsDouble</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" compoundref="json__value_8cpp" startline="716" endline="735">asUInt64</referencedby>
        <referencedby refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isIntegral</definition>
        <argsstring>() const </argsstring>
        <name>isIntegral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="353" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1289" bodyend="1295"/>
        <references refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</references>
        <references refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" compoundref="json__value_8cpp" startline="1249" endline="1267">isInt64</references>
        <references refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</references>
        <references refid="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" compoundref="json__value_8cpp" startline="1269" endline="1287">isUInt64</references>
        <referencedby refid="class_json_1_1_value_1a0ea567fa51fc808851698bef59b43626" compoundref="json__value_8cpp" startline="1297" endline="1297">isDouble</referencedby>
        <referencedby refid="class_json_1_1_value_1a8ce848900e2e8fa23a41fcc2c1409fab" compoundref="json__value_8cpp" startline="1299" endline="1299">isNumeric</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0ea567fa51fc808851698bef59b43626" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isDouble</definition>
        <argsstring>() const </argsstring>
        <name>isDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="354" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1297" bodyend="1297"/>
        <references refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1a8ce848900e2e8fa23a41fcc2c1409fab" compoundref="json__value_8cpp" startline="1299" endline="1299">isNumeric</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8ce848900e2e8fa23a41fcc2c1409fab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isNumeric</definition>
        <argsstring>() const </argsstring>
        <name>isNumeric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="355" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1299" bodyend="1299"/>
        <references refid="class_json_1_1_value_1a0ea567fa51fc808851698bef59b43626" compoundref="json__value_8cpp" startline="1297" endline="1297">isDouble</references>
        <references refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" compoundref="json__value_8cpp" startline="1289" endline="1295">isIntegral</references>
        <referencedby refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" compoundref="json__value_8cpp" startline="817" endline="848">isConvertibleTo</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a06c01d7c1e8151a5844b595ab00f46c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isString</definition>
        <argsstring>() const </argsstring>
        <name>isString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="356" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1301" bodyend="1301"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_world_server_1aaf8647e224c4eb268fb4d46a14bb4d3e" compoundref="_world_server_2_src_2_se_http_process_8cpp" startline="103" endline="159">WorldServer::ProcessHS_QueryNearestRaceInfoRet</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac8c898f93543e55b67418f94bced20af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isArray</definition>
        <argsstring>() const </argsstring>
        <name>isArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="357" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1303" bodyend="1303"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" compoundref="json__value_8cpp" startline="874" endline="879">empty</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1aa5dc671edf10b9976f1511da2271ab9d" compoundref="json__writer_8cpp" startline="508" endline="533">Json::StyledWriter::isMultineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a88f4d342cf25c73aabf77c1b8ba01e44" compoundref="json__writer_8cpp" startline="727" endline="752">Json::StyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" compoundref="json__writer_8cpp" startline="1010" endline="1035">Json::BuiltStyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
        <referencedby refid="class_json_1_1_path_1a5289901fc58ad1fdca1de7fb5a0b620c" compoundref="json__value_8cpp" startline="1522" endline="1539">Json::Path::make</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="118" endline="158">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="1042" endline="1088">Json::OurReader::parse</referencedby>
        <referencedby refid="class_http_server_1ac78f56a8a81cf69fdffcf2e568d5afd4" compoundref="_se_http_resp_process_8cpp" startline="3" endline="25">HttpServer::ProcessHttp_QueryFreeHeroListRet</referencedby>
        <referencedby refid="class_json_1_1_path_1ae1d05fa985a6ee3c57f2b8ed186b5982" compoundref="json__value_8cpp" startline="1480" endline="1501">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a80cffaa0402b80317c0437216bbb6d92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isObject</definition>
        <argsstring>() const </argsstring>
        <name>isObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="358" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1305" bodyend="1305"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" compoundref="json__value_8cpp" startline="874" endline="879">empty</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1aa5dc671edf10b9976f1511da2271ab9d" compoundref="json__writer_8cpp" startline="508" endline="533">Json::StyledWriter::isMultineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a88f4d342cf25c73aabf77c1b8ba01e44" compoundref="json__writer_8cpp" startline="727" endline="752">Json::StyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" compoundref="json__writer_8cpp" startline="1010" endline="1035">Json::BuiltStyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
        <referencedby refid="class_json_1_1_path_1a5289901fc58ad1fdca1de7fb5a0b620c" compoundref="json__value_8cpp" startline="1522" endline="1539">Json::Path::make</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="118" endline="158">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="1042" endline="1088">Json::OurReader::parse</referencedby>
        <referencedby refid="class_world_server_1aaf8647e224c4eb268fb4d46a14bb4d3e" compoundref="_world_server_2_src_2_se_http_process_8cpp" startline="103" endline="159">WorldServer::ProcessHS_QueryNearestRaceInfoRet</referencedby>
        <referencedby refid="class_http_server_1ac78f56a8a81cf69fdffcf2e568d5afd4" compoundref="_se_http_resp_process_8cpp" startline="3" endline="25">HttpServer::ProcessHttp_QueryFreeHeroListRet</referencedby>
        <referencedby refid="class_json_1_1_path_1ae1d05fa985a6ee3c57f2b8ed186b5982" compoundref="json__value_8cpp" startline="1480" endline="1501">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isConvertibleTo</definition>
        <argsstring>(ValueType other) const </argsstring>
        <name>isConvertibleTo</name>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="360" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="817" bodyend="848"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="class_json_1_1_value_1a33434ed1c0217a34d04c95fa5342fd37" compoundref="json__value_8cpp" startline="754" endline="774">asDouble</references>
        <references refid="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" compoundref="json__value_8cpp" startline="614" endline="637">asString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="590">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="57" endline="59">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" compoundref="json__value_8cpp" startline="1219" endline="1232">isInt</references>
        <references refid="class_json_1_1_value_1a8ce848900e2e8fa23a41fcc2c1409fab" compoundref="json__value_8cpp" startline="1299" endline="1299">isNumeric</references>
        <references refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" compoundref="json__value_8cpp" startline="1234" endline="1247">isUInt</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" compoundref="value_8h" startline="190">maxInt</references>
        <references refid="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" compoundref="value_8h" startline="192">maxUInt</references>
        <references refid="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" compoundref="value_8h" startline="188">minInt</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="589">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
        <definition>ArrayIndex Json::Value::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Number of values in array or object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="363" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="851" bodyend="872"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="84">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="80">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="22">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="82">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="83">Json::stringValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="81">Json::uintValue</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1a7e49ac977e4bcf59745a09d426669f75" compoundref="json__value_8cpp" startline="1064" endline="1064">append</referencedby>
        <referencedby refid="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" compoundref="json__value_8cpp" startline="874" endline="879">empty</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1aa5dc671edf10b9976f1511da2271ab9d" compoundref="json__writer_8cpp" startline="508" endline="533">Json::StyledWriter::isMultineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a88f4d342cf25c73aabf77c1b8ba01e44" compoundref="json__writer_8cpp" startline="727" endline="752">Json::StyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1af423fd33b3d580506ea3efc53b05a077" compoundref="json__writer_8cpp" startline="1010" endline="1035">Json::BuiltStyledStreamWriter::isMultineArray</referencedby>
        <referencedby refid="class_json_1_1_value_1aaa82ebb4b730ea1567d310874f47d147" compoundref="json__value_8cpp" startline="1014" endline="1014">isValidIndex</referencedby>
        <referencedby refid="class_world_server_1aaf8647e224c4eb268fb4d46a14bb4d3e" compoundref="_world_server_2_src_2_se_http_process_8cpp" startline="103" endline="159">WorldServer::ProcessHS_QueryNearestRaceInfoRet</referencedby>
        <referencedby refid="class_http_server_1ac78f56a8a81cf69fdffcf2e568d5afd4" compoundref="_se_http_resp_process_8cpp" startline="3" endline="25">HttpServer::ProcessHttp_QueryFreeHeroListRet</referencedby>
        <referencedby refid="class_json_1_1_value_1ae9e67e08a85a2f3be3396ec0f4c47f65" compoundref="json__value_8cpp" startline="1118" endline="1139">removeIndex</referencedby>
        <referencedby refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" compoundref="json__value_8cpp" startline="899" endline="915">resize</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1aa1dfed085a3d369e953e4a3c34da009e" compoundref="json__writer_8cpp" startline="1166" endline="1182">Json::StreamWriterBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_char_reader_builder_1a3d233735a1e4b3c9a2cb9c68f972c02a" compoundref="json__reader_8cpp" startline="1948" endline="1964">Json::CharReaderBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a0618c23d62965515def15ece1e677f5d" compoundref="json__writer_8cpp" startline="465" endline="506">Json::StyledWriter::writeArrayValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a606f2ddd58093c9b019d452c1b6f09fe" compoundref="json__writer_8cpp" startline="682" endline="725">Json::StyledStreamWriter::writeArrayValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1acd20e9274bbcf7876ef3af2e7d23a31f" compoundref="json__writer_8cpp" startline="963" endline="1008">Json::BuiltStyledStreamWriter::writeArrayValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if empty array, empty object, or null; otherwise, false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="367" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="874" bodyend="879"/>
        <references refid="class_json_1_1_value_1ac8c898f93543e55b67418f94bced20af" compoundref="json__value_8cpp" startline="1303" endline="1303">isArray</references>
        <references refid="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" compoundref="json__value_8cpp" startline="1215" endline="1215">isNull</references>
        <references refid="class_json_1_1_value_1a80cffaa0402b80317c0437216bbb6d92" compoundref="json__value_8cpp" startline="1305" endline="1305">isObject</references>
        <references refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a021ab0d15a807fbe051446c9c545ab61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator!</definition>
        <argsstring>() const </argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Return <ref refid="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" kindref="member">isNull()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="370" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="881" bodyend="881"/>
        <references refid="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" compoundref="json__value_8cpp" startline="1215" endline="1215">isNull</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all object members and array elements. <simplesect kind="pre"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is arrayValue, objectValue, or nullValue </para></simplesect>
<simplesect kind="post"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is unchanged </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="375" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="883" bodyend="897"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" compoundref="value_8h" startline="602">limit_</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" compoundref="value_8h" startline="601">start_</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" compoundref="json__value_8cpp" startline="899" endline="915">resize</referencedby>
        <referencedby refid="struct_c_item_1a78a62a5fe370896e1afe98bab3898087" compoundref="_src_2_item_mgr_8cpp" startline="1272" endline="1343">CItem::saveData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::resize</definition>
        <argsstring>(ArrayIndex size)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the array to size elements. New elements are initialized to null. May only be called on nullValue or arrayValue. <simplesect kind="pre"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is arrayValue or nullValue </para></simplesect>
<simplesect kind="post"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is arrayValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="382" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="899" bodyend="915"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" compoundref="json__value_8cpp" startline="883" endline="897">clear</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(ArrayIndex index)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an array element (zero based index ). If the array contains less than index element, then null value are inserted in the array so that its size is index+1. (You may need to say &apos;value[0u]&apos; to get your compiler to distinguish this from the operator[] which takes a string.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="390" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="917" bodyend="931"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac9182982c361e0ab621134d406e5f250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an array element (zero based index ). If the array contains less than index element, then null value are inserted in the array so that its size is index+1. (You may need to say &apos;value[0u]&apos; to get your compiler to distinguish this from the operator[] which takes a string.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="398" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="933" bodyend="938"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af151919e8947c430e34bed2b0b128601" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(ArrayIndex index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an array element (zero based index ) (You may need to say &apos;value[0u]&apos; to get your compiler to distinguish this from the operator[] which takes a string.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="403" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="940" bodyend="951"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af9e02b38f4e63e491c300c20b275bdd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an array element (zero based index ) (You may need to say &apos;value[0u]&apos; to get your compiler to distinguish this from the operator[] which takes a string.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="408" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="953" bodyend="958"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a28282c9b76fa031eba7a1843c47c16fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(ArrayIndex index, const Value &amp;defaultValue) const </argsstring>
        <name>get</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the array contains at least index+1 elements, returns the element value, otherwise returns defaultValue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="413" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1009" bodyend="1012"/>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aaa82ebb4b730ea1567d310874f47d147" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isValidIndex</definition>
        <argsstring>(ArrayIndex index) const </argsstring>
        <name>isValidIndex</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return true if index &lt; <ref refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" kindref="member">size()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="415" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1014" bodyend="1014"/>
        <references refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</references>
        <referencedby refid="class_json_1_1_path_1ae1d05fa985a6ee3c57f2b8ed186b5982" compoundref="json__value_8cpp" startline="1480" endline="1501">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7e49ac977e4bcf59745a09d426669f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::append</definition>
        <argsstring>(const Value &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Append value to array at the end. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to jsonvalue[jsonvalue.size()] = value; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="419" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1064" bodyend="1064"/>
        <references refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</references>
        <referencedby refid="struct_c_item_1a78a62a5fe370896e1afe98bab3898087" compoundref="_src_2_item_mgr_8cpp" startline="1272" endline="1343">CItem::saveData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1acb912f4ec40a25ea6eb387730885f3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const char *key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an object value by name, create a null member if it does not exist. <simplesect kind="note"><para>Because of our implementation, keys are limited to 2^30 -1 chars. Exceeding that will cause an exception. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="424" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1040" bodyend="1042"/>
        <references refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae5f73ffc7a039bca81b7ca771bc5db55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const char *key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an object value by name, returns null if there is no member with that name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="427" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1027" bodyend="1032"/>
        <references refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae511c7d46bf457412fb55c9471af9f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an object value by name, create a null member if it does not exist. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="430" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1044" bodyend="1046"/>
        <references refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a26dc88ac5be67772374898655744fdc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value const &amp; Json::Value::operator[]</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access an object value by name, returns null if there is no member with that name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="434" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1033" bodyend="1038"/>
        <references refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac3763d7d315ca65dc188e273722f7955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const StaticString &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="class_json_1_1_static_string" kindref="compound">StaticString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Access an object value by name, create a null member if it does not exist. </para>        </briefdescription>
        <detaileddescription>
<para>If the object has no entry for that name, then the member name used to store the new entry is not duplicated. Example of use: <programlisting><codeline><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref><sp/>object;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StaticString<sp/>code(</highlight><highlight class="stringliteral">&quot;code&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[code]<sp/>=<sp/>1234;</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="447" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1048" bodyend="1050"/>
        <references refid="class_json_1_1_static_string_1ab86fc6a3183adf12fdba4b370acf1754" compoundref="value_8h" startline="122" endline="122">Json::StaticString::c_str</references>
        <references refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" compoundref="json__value_8cpp" startline="971" endline="987">resolveReference</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab76b3323cde14c7db20676d07b260ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const char *key, const Value &amp;defaultValue) const </argsstring>
        <name>get</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the member named key if it exist, defaultValue otherwise. <simplesect kind="note"><para>deep copy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="457" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1abcb2289c005bc0befdedaa94f662f63f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const char *begin, const char *end, const Value &amp;defaultValue) const </argsstring>
        <name>get</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the member named key if it exist, defaultValue otherwise. <simplesect kind="note"><para>deep copy </para><simplesectsep/><para>key may contain embedded nulls. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="461" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1066" bodyend="1070"/>
        <references refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a54a34264356e01ee9c21a75ccfc809e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const std::string &amp;key, const Value &amp;defaultValue) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the member named key if it exist, defaultValue otherwise. <simplesect kind="note"><para>deep copy </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="465" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1075" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> const *</type>
        <definition>Value const * Json::Value::find</definition>
        <argsstring>(char const *begin, char const *end) const </argsstring>
        <name>find</name>
        <param>
          <type>char const *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Most general and efficient version of isMember()const, get()const, and operator[]const <simplesect kind="note"><para>As stated elsewhere, behavior is undefined if (end-begin) &gt;= 2^30 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="474" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1016" bodyend="1026"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1_1_c_z_string_1a2805c46fb4a72bbaed55de6d75941b6da08d540450fa6c4af57eaacf063eedd20" compoundref="value_8h" startline="208">Json::Value::CZString::noDuplication</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1abcb2289c005bc0befdedaa94f662f63f" compoundref="json__value_8cpp" startline="1066" endline="1070">get</referencedby>
        <referencedby refid="class_json_1_1_value_1a077604b87a79d75543a1b5438eb9d8ab" compoundref="json__value_8cpp" startline="1148" endline="1152">isMember</referencedby>
        <referencedby refid="class_json_1_1_value_1ae5f73ffc7a039bca81b7ca771bc5db55" compoundref="json__value_8cpp" startline="1027" endline="1032">operator[]</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afeb7ff596a0929d90c5f2f3cffb413ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> const *</type>
        <definition>Value const* Json::Value::demand</definition>
        <argsstring>(char const *begin, char const *end)</argsstring>
        <name>demand</name>
        <param>
          <type>char const *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Most general and efficient version of object-mutators. <simplesect kind="note"><para>As stated elsewhere, behavior is undefined if (end-begin) &gt;= 2^30 </para></simplesect>
<simplesect kind="return"><para>non-zero, but JSON_ASSERT if this is neither object nor nullValue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::removeMember</definition>
        <argsstring>(const char *key)</argsstring>
        <name>removeMember</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove and return the named member. </para>        </briefdescription>
        <detaileddescription>
<para>Do nothing if it did not exist. <simplesect kind="return"><para>the removed <ref refid="class_json_1_1_value" kindref="compound">Value</ref>, or null. </para></simplesect>
<simplesect kind="pre"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is objectValue or nullValue </para></simplesect>
<simplesect kind="post"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is unchanged </para></simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="486" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1102" bodyend="1112"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1a708e599489adf30d65bf85a8ee16e6fb" compoundref="json__value_8cpp" startline="1094" endline="1097">removeMember</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae1f95f7ca3906e6bcc2a7be93210ecba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::removeMember</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>removeMember</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" kindref="member">removeMember(const char*)</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="490" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1113" bodyend="1116"/>
        <references refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" compoundref="json__value_8cpp" startline="1102" endline="1112">removeMember</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a708e599489adf30d65bf85a8ee16e6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(const char *key, Value *removed)</argsstring>
        <name>removeMember</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" kindref="member">removeMember(const char* begin, const char* end, Value* removed)</ref>, but &apos;key&apos; is null-terminated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="493" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1094" bodyend="1097"/>
        <references refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" compoundref="json__value_8cpp" startline="1102" endline="1112">removeMember</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a3749dae413a73eac05b7f8dc6deeb6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(std::string const &amp;key, Value *removed)</argsstring>
        <name>removeMember</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
<para>Remove the named map member. </para>        </briefdescription>
        <detaileddescription>
<para>Update &apos;removed&apos; iff removed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true iff removed (no exceptions) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="500" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1098" bodyend="1101"/>
        <references refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" compoundref="json__value_8cpp" startline="1102" endline="1112">removeMember</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(const char *begin, const char *end, Value *removed)</argsstring>
        <name>removeMember</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="class_json_1_1_value_1a3749dae413a73eac05b7f8dc6deeb6a2" kindref="member">removeMember(std::string const&amp; key, Value* removed)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="502" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1081" bodyend="1093"/>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1_1_c_z_string_1a2805c46fb4a72bbaed55de6d75941b6da08d540450fa6c4af57eaacf063eedd20" compoundref="value_8h" startline="208">Json::Value::CZString::noDuplication</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae9e67e08a85a2f3be3396ec0f4c47f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeIndex</definition>
        <argsstring>(ArrayIndex i, Value *removed)</argsstring>
        <name>removeIndex</name>
        <param>
          <type><ref refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" kindref="member">ArrayIndex</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
<para>Remove the indexed array element. </para>        </briefdescription>
        <detaileddescription>
<para>O(n) expensive operations. Update &apos;removed&apos; iff removed. <simplesect kind="return"><para>true iff removed (no exceptions) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="509" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1118" bodyend="1139"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" compoundref="json__value_8cpp" startline="851" endline="872">size</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a196defba501d70ea2b6793afb04108e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const char *key) const </argsstring>
        <name>isMember</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the object has a member named key. <simplesect kind="note"><para>&apos;key&apos; must be null-terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="513" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1153" bodyend="1156"/>
        <referencedby refid="class_json_1_1_value_1af728b5738aaa133f3aad2e39dc4f415e" compoundref="json__value_8cpp" startline="1157" endline="1160">isMember</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af728b5738aaa133f3aad2e39dc4f415e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>isMember</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the object has a member named key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>may contain embedded nulls. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="516" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1157" bodyend="1160"/>
        <references refid="class_json_1_1_value_1a196defba501d70ea2b6793afb04108e3" compoundref="json__value_8cpp" startline="1153" endline="1156">isMember</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a077604b87a79d75543a1b5438eb9d8ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const char *begin, const char *end) const </argsstring>
        <name>isMember</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="class_json_1_1_value_1af728b5738aaa133f3aad2e39dc4f415e" kindref="member">isMember(std::string const&amp; key)const</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="518" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1148" bodyend="1152"/>
        <references refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" compoundref="json__value_8cpp" startline="1016" endline="1026">find</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a30fa08af88f2d0a038b22ba9f4e88b2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1ac61bab5a465848b57610379cc07995c3" kindref="member">Members</ref></type>
        <definition>Value::Members Json::Value::getMemberNames</definition>
        <argsstring>() const </argsstring>
        <name>getMemberNames</name>
        <briefdescription>
<para>Return a list of the member names. </para>        </briefdescription>
        <detaileddescription>
<para>If null, return an empty list. <simplesect kind="pre"><para><ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> is objectValue or nullValue </para></simplesect>
<simplesect kind="post"><para>if <ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref> was nullValue, it remains nullValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="529" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1168" bodyend="1183"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1a3d233735a1e4b3c9a2cb9c68f972c02a" compoundref="json__reader_8cpp" startline="1948" endline="1964">Json::CharReaderBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="335" endline="387">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="406" endline="463">Json::StyledWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="623" endline="680">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="904" endline="961">Json::BuiltStyledStreamWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a29f3a30f7e5d3af6f38d57999bf5b480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setComment</definition>
        <argsstring>(const char *comment, CommentPlacement placement)</argsstring>
        <name>setComment</name>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Always pass len. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="538" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1317" bodyend="1319"/>
        <referencedby refid="class_json_1_1_reader_1aaea3bd62d12ffb6117a61476c0685049" compoundref="json__reader_8cpp" startline="389" endline="398">Json::Reader::addComment</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1ad7318c37469a9106069a236fb4b10e1f" compoundref="json__reader_8cpp" startline="1348" endline="1357">Json::OurReader::addComment</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="118" endline="158">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="1042" endline="1088">Json::OurReader::parse</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="160" endline="242">Json::Reader::readValue</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="1090" endline="1191">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_value_1a6d68a2e7d4e1e317cd9e812e12181689" compoundref="json__value_8cpp" startline="1321" endline="1323">setComment</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setComment</definition>
        <argsstring>(const char *comment, size_t len, CommentPlacement placement)</argsstring>
        <name>setComment</name>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
<para>Comments must be //... or /* ... */. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="540" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1307" bodyend="1315"/>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351abcbd3eb00417335e094e4a03379659b5" compoundref="value_8h" startline="94">Json::numberOfCommentPlacement</references>
        <references refid="struct_json_1_1_value_1_1_comment_info_1a4d01c2cd8c07995969c5d636dfd4fa8c" compoundref="json__value_8cpp" startline="194" endline="205">Json::Value::CommentInfo::setComment</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a6d68a2e7d4e1e317cd9e812e12181689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setComment</definition>
        <argsstring>(const std::string &amp;comment, CommentPlacement placement)</argsstring>
        <name>setComment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
<para>Comments must be //... or /* ... */. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="542" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1321" bodyend="1323"/>
        <references refid="class_json_1_1_value_1a29f3a30f7e5d3af6f38d57999bf5b480" compoundref="json__value_8cpp" startline="1317" endline="1319">setComment</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a06567a00363cab9601be7e31336db03a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::hasComment</definition>
        <argsstring>(CommentPlacement placement) const </argsstring>
        <name>hasComment</name>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="543" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1325" bodyend="1327"/>
        <references refid="struct_json_1_1_value_1_1_comment_info_1a020f19c7098bab8ec8fec14cd1a5afb9" compoundref="value_8h" startline="574">Json::Value::CommentInfo::comment_</references>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <referencedby refid="class_json_1_1_value_1aa1e105b5d7f55d6e42f4fb2f3674116f" compoundref="json__value_8cpp" startline="1329" endline="1333">getComment</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a37a806d010f708cb68556f2666f79bdf" compoundref="json__writer_8cpp" startline="596" endline="600">Json::StyledWriter::hasCommentForValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2892f57171919fa4f8a5ae5574755cf" compoundref="json__writer_8cpp" startline="811" endline="815">Json::StyledStreamWriter::hasCommentForValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a457c2f3c1e8c952caeb60e52477d0c9a" compoundref="json__writer_8cpp" startline="1100" endline="1104">Json::BuiltStyledStreamWriter::hasCommentForValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ab12b274c62822fc51ec4617c6be95139" compoundref="json__writer_8cpp" startline="585" endline="594">Json::StyledWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2ca860e317ca91d6b2932535b4ce9c7" compoundref="json__writer_8cpp" startline="800" endline="809">Json::StyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" compoundref="json__writer_8cpp" startline="1088" endline="1097">Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ad3452c48fabf968bf3693549331ec06e" compoundref="json__writer_8cpp" startline="565" endline="583">Json::StyledWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a79c3c2b320475035c47b2db484a3e434" compoundref="json__writer_8cpp" startline="782" endline="798">Json::StyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" compoundref="json__writer_8cpp" startline="1069" endline="1086">Json::BuiltStyledStreamWriter::writeCommentBeforeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa1e105b5d7f55d6e42f4fb2f3674116f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Json::Value::getComment</definition>
        <argsstring>(CommentPlacement placement) const </argsstring>
        <name>getComment</name>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
<para>Include delimiters and embedded newlines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="545" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1329" bodyend="1333"/>
        <references refid="struct_json_1_1_value_1_1_comment_info_1a020f19c7098bab8ec8fec14cd1a5afb9" compoundref="value_8h" startline="574">Json::Value::CommentInfo::comment_</references>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="class_json_1_1_value_1a06567a00363cab9601be7e31336db03a" compoundref="json__value_8cpp" startline="1325" endline="1327">hasComment</references>
        <referencedby refid="class_json_1_1_styled_writer_1ab12b274c62822fc51ec4617c6be95139" compoundref="json__writer_8cpp" startline="585" endline="594">Json::StyledWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2ca860e317ca91d6b2932535b4ce9c7" compoundref="json__writer_8cpp" startline="800" endline="809">Json::StyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" compoundref="json__writer_8cpp" startline="1088" endline="1097">Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ad3452c48fabf968bf3693549331ec06e" compoundref="json__writer_8cpp" startline="565" endline="583">Json::StyledWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a79c3c2b320475035c47b2db484a3e434" compoundref="json__writer_8cpp" startline="782" endline="798">Json::StyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" compoundref="json__writer_8cpp" startline="1069" endline="1086">Json::BuiltStyledStreamWriter::writeCommentBeforeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a05357cf78959b790337fae4e5580ee4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Json::Value::toStyledString</definition>
        <argsstring>() const </argsstring>
        <name>toStyledString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="547" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1343" bodyend="1346"/>
        <references refid="class_json_1_1_styled_writer_1abd42ae0b8a788a46969fc51a28a496f5" compoundref="json__writer_8cpp" startline="395" endline="404">Json::StyledWriter::write</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac12df0d6980600c5bac908ed0f64856e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1af92282ca92b58b320debd486afb7696a" kindref="member">const_iterator</ref></type>
        <definition>Value::const_iterator Json::Value::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="549" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1348" bodyend="1359"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a596da1926b2f2a4056bff2edb713eb0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1af92282ca92b58b320debd486afb7696a" kindref="member">const_iterator</ref></type>
        <definition>Value::const_iterator Json::Value::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="550" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1361" bodyend="1372"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="struct_c_item_1ac8447ab1df31981bec3c1e42d6a71d83" compoundref="_src_2_item_mgr_8cpp" startline="1132" endline="1240">CItem::loadData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a341cdf2e01f8b3c5b7317aa2f0768c53" kindref="member">iterator</ref></type>
        <definition>Value::iterator Json::Value::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="552" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1374" bodyend="1385"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a341cdf2e01f8b3c5b7317aa2f0768c53" kindref="member">iterator</ref></type>
        <definition>Value::iterator Json::Value::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="553" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1387" bodyend="1398"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="85">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a6d741407c3d784360c200f181b0d6d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setOffsetStart</definition>
        <argsstring>(size_t start)</argsstring>
        <name>setOffsetStart</name>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="557" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1335" bodyend="1335"/>
        <references refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" compoundref="value_8h" startline="601">start_</references>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="605" endline="613">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1585" endline="1593">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="553" endline="561">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1535" endline="1543">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="627" endline="636">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1631" endline="1640">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1afd9a30c0af205c9f327613f486fae6b8" compoundref="json__reader_8cpp" startline="515" endline="551">Json::Reader::readArray</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" compoundref="json__reader_8cpp" startline="1497" endline="1533">Json::OurReader::readArray</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="459" endline="513">Json::Reader::readObject</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1435" endline="1495">Json::OurReader::readObject</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="160" endline="242">Json::Reader::readValue</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="1090" endline="1191">Json::OurReader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac6d858b5fd4d5fe6ca84f697def8c5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setOffsetLimit</definition>
        <argsstring>(size_t limit)</argsstring>
        <name>setOffsetLimit</name>
        <param>
          <type>size_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="558" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1337" bodyend="1337"/>
        <references refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" compoundref="value_8h" startline="602">limit_</references>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="605" endline="613">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1585" endline="1593">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="553" endline="561">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1535" endline="1543">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="627" endline="636">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1631" endline="1640">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="160" endline="242">Json::Reader::readValue</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="1090" endline="1191">Json::OurReader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a10142eda11ae0b1caecbcc9f436854d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Json::Value::getOffsetStart</definition>
        <argsstring>() const </argsstring>
        <name>getOffsetStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="559" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1339" bodyend="1339"/>
        <references refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" compoundref="value_8h" startline="601">start_</references>
        <referencedby refid="class_json_1_1_reader_1ade6c28e0ef00d8f2e0aa2283f91c3e37" compoundref="json__reader_8cpp" startline="853" endline="868">Json::Reader::pushError</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aef7aa4ca22ffaa38c401b16951d20e1e" compoundref="json__reader_8cpp" startline="1852" endline="1867">Json::OurReader::pushError</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1acd7114469bc39368e9d93c29b54d8c8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Json::Value::getOffsetLimit</definition>
        <argsstring>() const </argsstring>
        <name>getOffsetLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="560" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="1341" bodyend="1341"/>
        <references refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" compoundref="value_8h" startline="602">limit_</references>
        <referencedby refid="class_json_1_1_reader_1ade6c28e0ef00d8f2e0aa2283f91c3e37" compoundref="json__reader_8cpp" startline="853" endline="868">Json::Reader::pushError</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aef7aa4ca22ffaa38c401b16951d20e1e" compoundref="json__reader_8cpp" startline="1852" endline="1867">Json::OurReader::pushError</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::initBasic</definition>
        <argsstring>(ValueType type, bool allocated=false)</argsstring>
        <name>initBasic</name>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allocated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="563" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="960" bodyend="966"/>
        <references refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" compoundref="value_8h" startline="595">allocated_</references>
        <references refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" compoundref="value_8h" startline="597">comments_</references>
        <references refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" compoundref="value_8h" startline="602">limit_</references>
        <references refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" compoundref="value_8h" startline="601">start_</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <referencedby refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::resolveReference</definition>
        <argsstring>(const char *key)</argsstring>
        <name>resolveReference</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="565" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="971" bodyend="987"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1_1_c_z_string_1a2805c46fb4a72bbaed55de6d75941b6da08d540450fa6c4af57eaacf063eedd20" compoundref="value_8h" startline="208">Json::Value::CZString::noDuplication</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
        <referencedby refid="class_json_1_1_value_1acb912f4ec40a25ea6eb387730885f3d9" compoundref="json__value_8cpp" startline="1040" endline="1042">operator[]</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5f6b3aaf4f2e952a33dd823db008c333" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::resolveReference</definition>
        <argsstring>(const char *key, const char *end)</argsstring>
        <name>resolveReference</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="566" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="990" bodyend="1007"/>
        <references refid="class_json_1_1_value_1_1_c_z_string_1a2805c46fb4a72bbaed55de6d75941b6da5c18c35205a3be63ad14ce659e70fe7d" compoundref="value_8h" startline="210">Json::Value::CZString::duplicateOnCopy</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="49">JSON_ASSERT_MESSAGE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="592">Json::Value::ValueHolder::map_</references>
        <references refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" compoundref="value_8h" startline="179">nullRef</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="79">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="86">Json::objectValue</references>
        <references refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" compoundref="value_8h" startline="594">type_</references>
        <references refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" compoundref="json__value_8cpp" startline="303" endline="328">Value</references>
        <references refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151">value_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a <ulink url="http://www.json.org">JSON</ulink> value. </para>    </briefdescription>
    <detaileddescription>
<para>This class is a discriminated union wrapper that can represents a:<itemizedlist>
<listitem><para>signed integer [range: <ref refid="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" kindref="member">Value::minInt</ref> - <ref refid="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" kindref="member">Value::maxInt</ref>]</para></listitem><listitem><para>unsigned integer (range: 0 - <ref refid="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" kindref="member">Value::maxUInt</ref>)</para></listitem><listitem><para>double</para></listitem><listitem><para>UTF-8 string</para></listitem><listitem><para>boolean</para></listitem><listitem><para>&apos;null&apos;</para></listitem><listitem><para>an ordered list of <ref refid="class_json_1_1_value" kindref="compound">Value</ref></para></listitem><listitem><para>collection of name/value pairs (javascript object)</para></listitem></itemizedlist>
</para><para>The type of the held value is represented by a <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref> and can be obtained using <ref refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" kindref="member">type()</ref>.</para><para>Values of an <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" kindref="member">objectValue</ref> or <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" kindref="member">arrayValue</ref> can be accessed using <ref refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" kindref="member">operator[]()</ref> methods. Non-const methods will automatically create the a <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" kindref="member">nullValue</ref> element if it does not exist. The sequence of an <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" kindref="member">arrayValue</ref> will be automatically resized and initialized with <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" kindref="member">nullValue</ref>. <ref refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" kindref="member">resize()</ref> can be used to enlarge or truncate an <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" kindref="member">arrayValue</ref>.</para><para>The <ref refid="class_json_1_1_value_1a28282c9b76fa031eba7a1843c47c16fe" kindref="member">get()</ref> methods can be used to obtain default value in the case the required element does not exist.</para><para>It is possible to iterate over the list of a <ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" kindref="member">objectValue</ref> values using the <ref refid="class_json_1_1_value_1a30fa08af88f2d0a038b22ba9f4e88b2a" kindref="member">getMemberNames()</ref> method.</para><para><simplesect kind="note"><para><ref refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" kindref="member">Value</ref> string-length fit in size_t, but keys must be &lt; 2^30. (The reason is an implementation detail.) A #CharReader will raise an exception if a bound is exceeded to avoid security holes in your app, but the <ref refid="class_json_1_1_value" kindref="compound">Value</ref> API does <emphasis>not</emphasis> check bounds. That is the responsibility of the caller. </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="9469">
        <label>K</label>
      </node>
      <node id="9470">
        <label>T</label>
      </node>
      <node id="9465">
        <label>Json::Value</label>
        <link refid="class_json_1_1_value"/>
        <childnode refid="9465" relation="usage">
          <edgelabel>null</edgelabel>
          <edgelabel>nullRef</edgelabel>
        </childnode>
        <childnode refid="9466" relation="usage">
          <edgelabel>comments_</edgelabel>
        </childnode>
        <childnode refid="9467" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
      </node>
      <node id="9468">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="9469" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9470" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9467">
        <label>Json::Value::ValueHolder</label>
        <link refid="union_json_1_1_value_1_1_value_holder"/>
        <childnode refid="9468" relation="usage">
          <edgelabel>map_</edgelabel>
        </childnode>
      </node>
      <node id="9466">
        <label>Json::Value::CommentInfo</label>
        <link refid="struct_json_1_1_value_1_1_comment_info"/>
      </node>
    </collaborationgraph>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="162" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="162" bodyend="603"/>
    <listofallmembers>
      <member refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>allocated_</name></member>
      <member refid="class_json_1_1_value_1a7e49ac977e4bcf59745a09d426669f75" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>append</name></member>
      <member refid="class_json_1_1_value_1a184a91566cccca7b819240f0d5561c7d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>ArrayIndex</name></member>
      <member refid="class_json_1_1_value_1a7402c797285c020566c3db5f8ae4e940" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asBool</name></member>
      <member refid="class_json_1_1_value_1a5b7da48b163bcec63b1424f1608b7da6" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asCString</name></member>
      <member refid="class_json_1_1_value_1a33434ed1c0217a34d04c95fa5342fd37" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asDouble</name></member>
      <member refid="class_json_1_1_value_1ac2128d7080499daf8c5b1c71da243f63" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asFloat</name></member>
      <member refid="class_json_1_1_value_1ac786e35b860b1d700cb3d3e56dd6a235" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asInt</name></member>
      <member refid="class_json_1_1_value_1a7f739b55aef060f4ab6360bfe1912b77" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asInt64</name></member>
      <member refid="class_json_1_1_value_1a3786bb100c5cf9a98eb6d13784968956" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asLargestInt</name></member>
      <member refid="class_json_1_1_value_1a692b88345a745b2f89ca5d94b52e94d4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asLargestUInt</name></member>
      <member refid="class_json_1_1_value_1a03ee3d5df576640c93ba683f140828bd" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asString</name></member>
      <member refid="class_json_1_1_value_1a2019d1bd296b89356c1b0da5970c918c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asUInt</name></member>
      <member refid="class_json_1_1_value_1a65acdab039f60ff0da15e622f2e17739" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asUInt64</name></member>
      <member refid="class_json_1_1_value_1ac12df0d6980600c5bac908ed0f64856e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>begin</name></member>
      <member refid="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>begin</name></member>
      <member refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>clear</name></member>
      <member refid="class_json_1_1_value_1a2016564cabc7a29208e97bd0b782a4e4" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>comments_</name></member>
      <member refid="class_json_1_1_value_1a899214ed2253d3f4f061b922b0e622b5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>compare</name></member>
      <member refid="class_json_1_1_value_1af92282ca92b58b320debd486afb7696a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>const_iterator</name></member>
      <member refid="class_json_1_1_value_1afeb7ff596a0929d90c5f2f3cffb413ed" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>demand</name></member>
      <member refid="class_json_1_1_value_1a99c42d3ff8495dad1e91b43e66553c36" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>empty</name></member>
      <member refid="class_json_1_1_value_1a596da1926b2f2a4056bff2edb713eb0b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>end</name></member>
      <member refid="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>end</name></member>
      <member refid="class_json_1_1_value_1a184bf49ec5da7ec31af089cf6f458f99" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>find</name></member>
      <member refid="class_json_1_1_value_1a28282c9b76fa031eba7a1843c47c16fe" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1ab76b3323cde14c7db20676d07b260ce7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1abcb2289c005bc0befdedaa94f662f63f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1a54a34264356e01ee9c21a75ccfc809e9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1aa1e105b5d7f55d6e42f4fb2f3674116f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getComment</name></member>
      <member refid="class_json_1_1_value_1a30fa08af88f2d0a038b22ba9f4e88b2a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getMemberNames</name></member>
      <member refid="class_json_1_1_value_1acd7114469bc39368e9d93c29b54d8c8f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getOffsetLimit</name></member>
      <member refid="class_json_1_1_value_1a10142eda11ae0b1caecbcc9f436854d1" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getOffsetStart</name></member>
      <member refid="class_json_1_1_value_1a1e0263113ae247a632afac43ebc4149f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getString</name></member>
      <member refid="class_json_1_1_value_1a06567a00363cab9601be7e31336db03a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>hasComment</name></member>
      <member refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>initBasic</name></member>
      <member refid="class_json_1_1_value_1abdf7a7ff73eb130ffcab28504ffdb405" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Int</name></member>
      <member refid="class_json_1_1_value_1a1b86af9f85f0f1baa972c3319fa22695" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Int64</name></member>
      <member refid="class_json_1_1_value_1ac8c898f93543e55b67418f94bced20af" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isArray</name></member>
      <member refid="class_json_1_1_value_1a3c3716cc7a0216cb1b654bb8f61c8d13" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isBool</name></member>
      <member refid="class_json_1_1_value_1a7ec153803631a27abf58cba2bb1af70c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isConvertibleTo</name></member>
      <member refid="class_json_1_1_value_1a0ea567fa51fc808851698bef59b43626" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isDouble</name></member>
      <member refid="class_json_1_1_value_1ab0df4746d6787d2ce1db1a156c118f14" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isInt</name></member>
      <member refid="class_json_1_1_value_1aba89690e5fd72d0f7121a30013470423" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isInt64</name></member>
      <member refid="class_json_1_1_value_1aec4f74ef7b776b1d9c8a10fc3bb4add5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isIntegral</name></member>
      <member refid="class_json_1_1_value_1a196defba501d70ea2b6793afb04108e3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1af728b5738aaa133f3aad2e39dc4f415e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1a077604b87a79d75543a1b5438eb9d8ab" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1aeb9ad8b1bb91bdd72203dc884b3f4362" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isNull</name></member>
      <member refid="class_json_1_1_value_1a8ce848900e2e8fa23a41fcc2c1409fab" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isNumeric</name></member>
      <member refid="class_json_1_1_value_1a80cffaa0402b80317c0437216bbb6d92" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isObject</name></member>
      <member refid="class_json_1_1_value_1a06c01d7c1e8151a5844b595ab00f46c7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isString</name></member>
      <member refid="class_json_1_1_value_1ae814ca1796fe2d43ac09898b70213989" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isUInt</name></member>
      <member refid="class_json_1_1_value_1aa35efece2a6cba4d988d7d5b54db2fb8" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isUInt64</name></member>
      <member refid="class_json_1_1_value_1aaa82ebb4b730ea1567d310874f47d147" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isValidIndex</name></member>
      <member refid="class_json_1_1_value_1a341cdf2e01f8b3c5b7317aa2f0768c53" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>iterator</name></member>
      <member refid="class_json_1_1_value_1a1cbb82642ed05109b9833e49f042ece7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>LargestInt</name></member>
      <member refid="class_json_1_1_value_1a6682a3684d635e03fc06ba229fa24eec" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>LargestUInt</name></member>
      <member refid="class_json_1_1_value_1acbec44708b0d4dbec2db6d8428955dbb" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>limit_</name></member>
      <member refid="class_json_1_1_value_1a978c799a8af3114ef7dab6fd0a310a1b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxInt</name></member>
      <member refid="class_json_1_1_value_1a4492634870b8c5709ce967b384ac6006" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxInt64</name></member>
      <member refid="class_json_1_1_value_1a8b4977696f13296fa8755c7953fafb2f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxLargestInt</name></member>
      <member refid="class_json_1_1_value_1a8ddb32d9d55fa5323ae5135639dc2e31" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxLargestUInt</name></member>
      <member refid="class_json_1_1_value_1ac79e63ee68d3aa914bfd6988be669b87" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxUInt</name></member>
      <member refid="class_json_1_1_value_1ae1eb89c305c39516696ff305cffa01da" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxUInt64</name></member>
      <member refid="class_json_1_1_value_1ac61bab5a465848b57610379cc07995c3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Members</name></member>
      <member refid="class_json_1_1_value_1a7df8a39e2502b8c92a6a41e3d752d2c8" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minInt</name></member>
      <member refid="class_json_1_1_value_1a815ef899bc312c93bc426511acfe31a7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minInt64</name></member>
      <member refid="class_json_1_1_value_1af91df130daa50dd43d2cd89e6ee67706" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minLargestInt</name></member>
      <member refid="class_json_1_1_value_1a6d6e9ea6807e46d5b7ded66d3032f607" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>null</name></member>
      <member refid="class_json_1_1_value_1aaa4ffd4e53967170c3e8c9abf682b5cd" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>nullRef</name></member>
      <member refid="class_json_1_1_value_1a08b6c80c3af7071d908dabf044de5388" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>ObjectValues</name></member>
      <member refid="class_json_1_1_value_1a021ab0d15a807fbe051446c9c545ab61" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator!</name></member>
      <member refid="class_json_1_1_value_1ad0f12d2a4ab74bbef08a05504b2cb81d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator!=</name></member>
      <member refid="class_json_1_1_value_1af0ad8aa027575c3277296458f3fb7b0a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&lt;</name></member>
      <member refid="class_json_1_1_value_1afb99dd3628fe44244b32007f9b4f369a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&lt;=</name></member>
      <member refid="class_json_1_1_value_1a795acb28772da4c5d85ae8f4af36c69f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator=</name></member>
      <member refid="class_json_1_1_value_1a14363dda23a6ae2def9afd1590ae85d3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator==</name></member>
      <member refid="class_json_1_1_value_1a3124a26067bdfde9571bc89527fc6931" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&gt;</name></member>
      <member refid="class_json_1_1_value_1acc13fc47d55abd6e2327b090b83d2911" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&gt;=</name></member>
      <member refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ac9182982c361e0ab621134d406e5f250" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1af151919e8947c430e34bed2b0b128601" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1af9e02b38f4e63e491c300c20b275bdd7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1acb912f4ec40a25ea6eb387730885f3d9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ae5f73ffc7a039bca81b7ca771bc5db55" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ae511c7d46bf457412fb55c9471af9f50" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a26dc88ac5be67772374898655744fdc4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ac3763d7d315ca65dc188e273722f7955" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ae9e67e08a85a2f3be3396ec0f4c47f65" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeIndex</name></member>
      <member refid="class_json_1_1_value_1aa52f7873b95d29627d6e83ba96f69aaa" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1ae1f95f7ca3906e6bcc2a7be93210ecba" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a708e599489adf30d65bf85a8ee16e6fb" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a3749dae413a73eac05b7f8dc6deeb6a2" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1aa284353271ada427dbfa04a42f2be407" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>resize</name></member>
      <member refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>resolveReference</name></member>
      <member refid="class_json_1_1_value_1a5f6b3aaf4f2e952a33dd823db008c333" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>resolveReference</name></member>
      <member refid="class_json_1_1_value_1a29f3a30f7e5d3af6f38d57999bf5b480" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setComment</name></member>
      <member refid="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setComment</name></member>
      <member refid="class_json_1_1_value_1a6d68a2e7d4e1e317cd9e812e12181689" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setComment</name></member>
      <member refid="class_json_1_1_value_1ac6d858b5fd4d5fe6ca84f697def8c5ea" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setOffsetLimit</name></member>
      <member refid="class_json_1_1_value_1a6d741407c3d784360c200f181b0d6d64" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setOffsetStart</name></member>
      <member refid="class_json_1_1_value_1a4ca8ee6c48a34ca6c2f131956bab5e05" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>size</name></member>
      <member refid="class_json_1_1_value_1a810637b8c52661a3dbf4bfde5130d6d1" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>start_</name></member>
      <member refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>swap</name></member>
      <member refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>swapPayload</name></member>
      <member refid="class_json_1_1_value_1a05357cf78959b790337fae4e5580ee4f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>toStyledString</name></member>
      <member refid="class_json_1_1_value_1a695ef31fad36b4712918b3ff80158479" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>type</name></member>
      <member refid="class_json_1_1_value_1abd222c2536dc88bf330dedcd076d2356" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>type_</name></member>
      <member refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>UInt</name></member>
      <member refid="class_json_1_1_value_1a8b62564be8c087c6d18de180ff4e13e3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>UInt64</name></member>
      <member refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a4744ae571fcf34f4b16a2257b3b3b585" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ae67a857b01286e3499a87e95be848d20" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ab1cdc3d9a4d4cc03fa01439d43ceb1b5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a8adda58d5ae17bf7ca6a53bab4a7b69c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a32228cc84d83200cca8441451997996c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ad87b849356816aca75995dd07302e49d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a39fa09d1902efbd4350e1236db920571" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a081830e95f88a37054da7e46c65b0766" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1aa4501dd4edf3ce3d5145fc656f088b21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a350a31ea4a30d384994b0bc010b17495" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1aef578244546212705b9f81eb84d7e151" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>value_</name></member>
      <member refid="class_json_1_1_value_1ad016df56489e5d360735457afba2f649" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>ValueIteratorBase</name></member>
      <member refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>~Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
