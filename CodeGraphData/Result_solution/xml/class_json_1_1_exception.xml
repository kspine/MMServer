<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="class_json_1_1_exception" kind="class" prot="public">
    <compoundname>Json::Exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
    <derivedcompoundref refid="class_json_1_1_logic_error" prot="public" virt="non-virtual">Json::LogicError</derivedcompoundref>
    <derivedcompoundref refid="class_json_1_1_runtime_error" prot="public" virt="non-virtual">Json::RuntimeError</derivedcompoundref>
    <includes refid="value_8h" local="no">value.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_json_1_1_exception_1a26b7dfcd51256ad4da2742bbd0e14a24" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Json::Exception::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="46" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="46" bodyend="-1"/>
        <referencedby refid="class_json_1_1_exception_1add02e7f2ad4623cb44659ee079859197" compoundref="json__value_8cpp" startline="160" endline="163">what</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_json_1_1_exception_1a4dd1b9f007bed842e3ef9883d965fe22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Exception::Exception</definition>
        <argsstring>(std::string const &amp;msg)</argsstring>
        <name>Exception</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="42" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_exception_1aaf69650e18361cad0dea4c3e66ab123c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Exception::~Exception</definition>
        <argsstring>() override</argsstring>
        <name>~Exception</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="43" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="158" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_exception_1add02e7f2ad4623cb44659ee079859197" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char const *</type>
        <definition>char const * Json::Exception::what</definition>
        <argsstring>() const override</argsstring>
        <name>what</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="44" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp" bodystart="160" bodyend="163"/>
        <references refid="class_json_1_1_exception_1a26b7dfcd51256ad4da2742bbd0e14a24" compoundref="value_8h" startline="46">msg_</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for all exceptions we throw.</para><para>We use nothing but these internally. Of course, STL can throw others. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1379">
        <label>Json::LogicError</label>
        <link refid="class_json_1_1_logic_error"/>
        <childnode refid="1377" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1380">
        <label>Json::RuntimeError</label>
        <link refid="class_json_1_1_runtime_error"/>
        <childnode refid="1377" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1378">
        <label>std::exception</label>
      </node>
      <node id="1377">
        <label>Json::Exception</label>
        <link refid="class_json_1_1_exception"/>
        <childnode refid="1378" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1384">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="1382">
        <label>std::exception</label>
      </node>
      <node id="1381">
        <label>Json::Exception</label>
        <link refid="class_json_1_1_exception"/>
        <childnode refid="1382" relation="public-inheritance">
        </childnode>
        <childnode refid="1383" relation="usage">
          <edgelabel>msg_</edgelabel>
        </childnode>
      </node>
      <node id="1383">
        <label>std::string</label>
        <childnode refid="1384" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" line="40" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/json/value.h" bodystart="40" bodyend="47"/>
    <listofallmembers>
      <member refid="class_json_1_1_exception_1a4dd1b9f007bed842e3ef9883d965fe22" prot="public" virt="non-virtual"><scope>Json::Exception</scope><name>Exception</name></member>
      <member refid="class_json_1_1_exception_1a26b7dfcd51256ad4da2742bbd0e14a24" prot="protected" virt="non-virtual"><scope>Json::Exception</scope><name>msg_</name></member>
      <member refid="class_json_1_1_exception_1add02e7f2ad4623cb44659ee079859197" prot="public" virt="non-virtual"><scope>Json::Exception</scope><name>what</name></member>
      <member refid="class_json_1_1_exception_1aaf69650e18361cad0dea4c3e66ab123c" prot="public" virt="non-virtual"><scope>Json::Exception</scope><name>~Exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
