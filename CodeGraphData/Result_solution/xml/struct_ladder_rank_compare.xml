<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="struct_ladder_rank_compare" kind="struct" prot="public">
    <compoundname>LadderRankCompare</compoundname>
    <includes refid="_src_2_ladder_rank_mgr_8h" local="no">LadderRankMgr.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_ladder_rank_compare_1a28f0dfa63b1a9d42ca80e68da4936d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LadderRankCompare::operator()</definition>
        <argsstring>(const LadderRankIndex &amp;a, const LadderRankIndex &amp;b) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="struct_ladder_rank_index" kindref="compound">LadderRankIndex</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_ladder_rank_index" kindref="compound">LadderRankIndex</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/WorldServer/Src/LadderRankMgr.h" line="48" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/WorldServer/Src/LadderRankMgr.cpp" bodystart="128" bodyend="136"/>
        <references refid="struct_ladder_rank_index_1af1dab4e37d41a5e542975ce1e6e05012" compoundref="_src_2_ladder_rank_mgr_8h" startline="16">LadderRankIndex::m_Level</references>
        <references refid="struct_ladder_rank_index_1adcd6e59e09bc6b09347ca517618b8c14" compoundref="_src_2_ladder_rank_mgr_8h" startline="17">LadderRankIndex::m_PlayerLevel</references>
      </memberdef>
      <memberdef kind="function" id="struct_ladder_rank_compare_1a28f0dfa63b1a9d42ca80e68da4936d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LadderRankCompare::operator()</definition>
        <argsstring>(const LadderRankIndex &amp;a, const LadderRankIndex &amp;b) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="struct_ladder_rank_index" kindref="compound">LadderRankIndex</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_ladder_rank_index" kindref="compound">LadderRankIndex</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/WorldServer/src/LadderRankMgr.h" line="48" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/WorldServer/Src/LadderRankMgr.h" line="46" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/WorldServer/Src/LadderRankMgr.h" bodystart="45" bodyend="49"/>
    <listofallmembers>
      <member refid="struct_ladder_rank_compare_1a28f0dfa63b1a9d42ca80e68da4936d58" prot="public" virt="non-virtual"><scope>LadderRankCompare</scope><name>operator()</name></member>
      <member refid="struct_ladder_rank_compare_1a28f0dfa63b1a9d42ca80e68da4936d58" prot="public" virt="non-virtual"><scope>LadderRankCompare</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
