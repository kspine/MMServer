<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="json__valueiterator_8inl" kind="file">
    <compoundname>json_valueiterator.inl</compoundname>
    <includedby refid="json__value_8cpp" local="yes">F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp</includedby>
    <invincdepgraph>
      <node id="225">
        <label>F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_valueiterator.inl</label>
        <link refid="json_valueiterator.inl"/>
        <childnode refid="226" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_value.cpp</label>
        <link refid="json__value_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespace_json">Json</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007-2010<sp/>Baptiste<sp/>Lepilleur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>MIT<sp/>license,<sp/>or<sp/>public<sp/>domain<sp/>if<sp/>desired<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognized<sp/>in<sp/>your<sp/>jurisdiction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>file<sp/>LICENSE<sp/>for<sp/>detail<sp/>or<sp/>copy<sp/>at<sp/>http://jsoncpp.sourceforge.net/LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included<sp/>by<sp/>json_value.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Json<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueIteratorBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="class_json_1_1_value_iterator_base_1af45b028d9ff9cbd2554a87878b42dd75" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_base_1af45b028d9ff9cbd2554a87878b42dd75" kindref="member">ValueIteratorBase::ValueIteratorBase</ref>()</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>current_(),<sp/>isNull_(true)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="class_json_1_1_value_iterator_base_1a640e990e5f03a96fd650122a2906f59d" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_base_1af45b028d9ff9cbd2554a87878b42dd75" kindref="member">ValueIteratorBase::ValueIteratorBase</ref>(</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>current_(current),<sp/>isNull_(false)<sp/>{}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_json_1_1_value_iterator_base_1a40a20c65abc423a26e3aae68d9a0525c" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Value</ref>&amp;<sp/><ref refid="class_json_1_1_value_iterator_base_1a40a20c65abc423a26e3aae68d9a0525c" kindref="member">ValueIteratorBase::deref</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>-&gt;second;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_json_1_1_value_iterator_base_1afe58f9534e1fd2033419fd9fe244551e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1afe58f9534e1fd2033419fd9fe244551e" kindref="member">ValueIteratorBase::increment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>++<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_json_1_1_value_iterator_base_1affc8cf5ff54a9f432cc693362c153fa6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1affc8cf5ff54a9f432cc693362c153fa6" kindref="member">ValueIteratorBase::decrement</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>--<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_base_1a4e44bf8cbd17ec8d6e2c185904a15ebd" kindref="member">ValueIteratorBase::difference_type</ref></highlight></codeline>
<codeline lineno="39" refid="class_json_1_1_value_iterator_base_1ad6c553b249e89e3dc9933e100ccbe064" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_base_1ad6c553b249e89e3dc9933e100ccbe064" kindref="member">ValueIteratorBase::computeDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">SelfType</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_CPPTL_SMALLMAP</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref><sp/>-<sp/><ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>for<sp/>null<sp/>value<sp/>are<sp/>initialized<sp/>using<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor,<sp/>which<sp/>initialize<sp/>current_<sp/>to<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map::iterator.<sp/>As<sp/>begin()<sp/>and<sp/>end()<sp/>are<sp/>two<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>default<sp/>std::map::iterator,<sp/>they<sp/>can<sp/>not<sp/>be<sp/>compared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>this,<sp/>we<sp/>handle<sp/>this<sp/>comparison<sp/>specifically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref><sp/>&amp;&amp;<sp/>other.<ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Usage<sp/>of<sp/>std::distance<sp/>is<sp/>not<sp/>portable<sp/>(does<sp/>not<sp/>compile<sp/>with<sp/>Sun<sp/>Studio<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RogueWave<sp/>STL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>the<sp/>one<sp/>used<sp/>by<sp/>default).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>portable<sp/>hand-made<sp/>version<sp/>for<sp/>non<sp/>random<sp/>iterator<sp/>instead:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>difference_type(<sp/>std::distance(<sp/>current_,<sp/>other.current_<sp/>)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_value_iterator_base_1a4e44bf8cbd17ec8d6e2c185904a15ebd" kindref="member">difference_type</ref><sp/>myDistance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Value::ObjectValues::iterator<sp/>it<sp/>=<sp/><ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;<sp/>it<sp/>!=<sp/>other.<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>++myDistance;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myDistance;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_json_1_1_value_iterator_base_1a21820d6ee564e541bd118b21e4741962" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1a21820d6ee564e541bd118b21e4741962" kindref="member">ValueIteratorBase::isEqual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">SelfType</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.<ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref><sp/>==<sp/>other.<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_json_1_1_value_iterator_base_1a496e6aba44808433ec5858c178be5719" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base_1a496e6aba44808433ec5858c178be5719" kindref="member">ValueIteratorBase::copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">SelfType</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref><sp/>=<sp/>other.<ref refid="class_json_1_1_value_iterator_base_1ab3138ce8af8301cca3b041ea55cb922a" kindref="member">current_</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref><sp/>=<sp/>other.<ref refid="class_json_1_1_value_iterator_base_1a3e08b114a1aed9bde518c527f94a8c59" kindref="member">isNull_</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_json_1_1_value_iterator_base_1aa2ff5e79fc96acd4c3cd288e92614fc7" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value" kindref="compound">Value</ref><sp/><ref refid="class_json_1_1_value_iterator_base_1aa2ff5e79fc96acd4c3cd288e92614fc7" kindref="member">ValueIteratorBase::key</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_1_1_c_z_string" kindref="compound">Value::CZString</ref><sp/>czstring<sp/>=<sp/>(*current_).first;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a02482793b88b1062c4a0dd0a53f3d2a7" kindref="member">data</ref>())<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1af3cc02b77c2cd79d4646fcea3575c1fd" kindref="member">isStaticString</ref>())</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value" kindref="compound">Value</ref>(<ref refid="class_json_1_1_static_string" kindref="compound">StaticString</ref>(czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a02482793b88b1062c4a0dd0a53f3d2a7" kindref="member">data</ref>()));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value" kindref="compound">Value</ref>(czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a02482793b88b1062c4a0dd0a53f3d2a7" kindref="member">data</ref>(),<sp/>czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a02482793b88b1062c4a0dd0a53f3d2a7" kindref="member">data</ref>()<sp/>+<sp/>czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a4e697840c41fb56756be7a75efa114cb" kindref="member">length</ref>());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value" kindref="compound">Value</ref>(czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a4e9f305dbc4a4700abd955fde673a01c" kindref="member">index</ref>());</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="class_json_1_1_value_iterator_base_1aa90591f5f7f8d2f06cc4605816b53738" refkind="member"><highlight class="normal"><ref refid="namespace_json_1a800fb90eb6ee8d5d62b600c06f87f7d4" kindref="member">UInt</ref><sp/><ref refid="class_json_1_1_value_iterator_base_1aa90591f5f7f8d2f06cc4605816b53738" kindref="member">ValueIteratorBase::index</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_1_1_c_z_string" kindref="compound">Value::CZString</ref><sp/>czstring<sp/>=<sp/>(*current_).first;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a02482793b88b1062c4a0dd0a53f3d2a7" kindref="member">data</ref>())</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>czstring.<ref refid="class_json_1_1_value_1_1_c_z_string_1a4e9f305dbc4a4700abd955fde673a01c" kindref="member">index</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_1a0933d59b45793ae4aade1757c322a98d" kindref="member">Value::UInt</ref>(-1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="class_json_1_1_value_iterator_base_1a46a67081a5ef8d83f25ec15035403ce0" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_json_1_1_value_iterator_base_1a46a67081a5ef8d83f25ec15035403ce0" kindref="member">ValueIteratorBase::name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>keey;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>end;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>keey<sp/>=<sp/><ref refid="class_json_1_1_value_iterator_base_1ac3aa3870761342e47c6486d81f643c6c" kindref="member">memberName</ref>(&amp;end);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keey)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(keey,<sp/>end);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="class_json_1_1_value_iterator_base_1ac3aa3870761342e47c6486d81f643c6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="class_json_1_1_value_iterator_base_1ac3aa3870761342e47c6486d81f643c6c" kindref="member">ValueIteratorBase::memberName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cname<sp/>=<sp/>(*current_).first.data();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cname<sp/>?<sp/>cname<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="class_json_1_1_value_iterator_base_1a543d4e73e3d2d121bc287b24231386c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><ref refid="class_json_1_1_value_iterator_base_1ac3aa3870761342e47c6486d81f643c6c" kindref="member">ValueIteratorBase::memberName</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">**<sp/>end)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cname<sp/>=<sp/>(*current_).first.data();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cname)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>*end<sp/>=<sp/>cname<sp/>+<sp/>(*current_).first.length();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cname;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueConstIterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_json_1_1_value_const_iterator_1a1b10a46f1606421b0663492a5f9a2aad" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_const_iterator_1a1b10a46f1606421b0663492a5f9a2aad" kindref="member">ValueConstIterator::ValueConstIterator</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_json_1_1_value_const_iterator_1aa0a87edf5f1097f91dca5f2a389c4abd" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_const_iterator_1a1b10a46f1606421b0663492a5f9a2aad" kindref="member">ValueConstIterator::ValueConstIterator</ref>(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>(current)<sp/>{}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="class_json_1_1_value_const_iterator_1a7ef3df204a9ae83a0d8a3cd128e05c70" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_const_iterator_1a1b10a46f1606421b0663492a5f9a2aad" kindref="member">ValueConstIterator::ValueConstIterator</ref>(<ref refid="class_json_1_1_value_iterator" kindref="compound">ValueIterator</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="class_json_1_1_value_const_iterator" kindref="compound">ValueConstIterator</ref>&amp;<sp/><ref refid="class_json_1_1_value_const_iterator_1ad1b1c11f8d7fb22d4d3c231915f2b15b" kindref="member">ValueConstIterator::</ref></highlight></codeline>
<codeline lineno="136" refid="class_json_1_1_value_const_iterator_1ad1b1c11f8d7fb22d4d3c231915f2b15b" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_const_iterator_1ad1b1c11f8d7fb22d4d3c231915f2b15b" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_value_iterator_base_1a496e6aba44808433ec5858c178be5719" kindref="member">copy</ref>(other);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueIterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_json_1_1_value_iterator_1a09425cf4dc12244072a942f290a5c0ec" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_1a09425cf4dc12244072a942f290a5c0ec" kindref="member">ValueIterator::ValueIterator</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="class_json_1_1_value_iterator_1afb06ea21add440c78c27dc49570460a5" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_1a09425cf4dc12244072a942f290a5c0ec" kindref="member">ValueIterator::ValueIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value::ObjectValues::iterator&amp;<sp/>current)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>(current)<sp/>{}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_json_1_1_value_iterator_1aa85aa208670891670392259efa0143bb" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_1a09425cf4dc12244072a942f290a5c0ec" kindref="member">ValueIterator::ValueIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_const_iterator" kindref="compound">ValueConstIterator</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>(other)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="namespace_json_1a97f039a107b3f6cf1c3edee50e978f76" kindref="member">throwRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;ConstIterator<sp/>to<sp/>Iterator<sp/>should<sp/>never<sp/>be<sp/>allowed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_json_1_1_value_iterator_1a7d5e58a9a4a553968acdf3064b39d21c" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator_1a09425cf4dc12244072a942f290a5c0ec" kindref="member">ValueIterator::ValueIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator" kindref="compound">ValueIterator</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="class_json_1_1_value_iterator_1a8e23312b1db874f7e403fd7e76611bdc" refkind="member"><highlight class="normal"><ref refid="class_json_1_1_value_iterator" kindref="compound">ValueIterator</ref>&amp;<sp/><ref refid="class_json_1_1_value_iterator_1a8e23312b1db874f7e403fd7e76611bdc" kindref="member">ValueIterator::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_json_1_1_value_iterator_base" kindref="compound">SelfType</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="class_json_1_1_value_iterator_base_1a496e6aba44808433ec5858c178be5719" kindref="member">copy</ref>(other);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Other/3rdpart/json/lib_json/json_valueiterator.inl"/>
  </compounddef>
</doxygen>
