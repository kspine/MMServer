<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="struct_performance_timing_1_1_pred___interval_by_order" kind="struct" prot="public">
    <compoundname>PerformanceTiming::Pred_IntervalByOrder</compoundname>
    <includes refid="src_2_performance_timing_8h" local="no">PerformanceTiming.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_performance_timing_1_1_pred___interval_by_order_1af4ba13975b049675372b15e9a0b774e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PerformanceTiming::Pred_IntervalByOrder::operator()</definition>
        <argsstring>(const CInterval *pLHS, const CInterval *pRHS) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_performance_timing_1_1_c_interval" kindref="compound">CInterval</ref> *</type>
          <declname>pLHS</declname>
        </param>
        <param>
          <type>const <ref refid="class_performance_timing_1_1_c_interval" kindref="compound">CInterval</ref> *</type>
          <declname>pRHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="809" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="809" bodyend="812"/>
        <references refid="class_performance_timing_1_1_c_interval_1aece495b6b04748318f82795084e2cb12" compoundref="src_2_performance_timing_8h" startline="645" endline="648">PerformanceTiming::CInterval::GetTotalIntervalTimeSec</references>
      </memberdef>
      <memberdef kind="function" id="struct_performance_timing_1_1_pred___interval_by_order_1af4ba13975b049675372b15e9a0b774e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool PerformanceTiming::Pred_IntervalByOrder::operator()</definition>
        <argsstring>(const CInterval *pLHS, const CInterval *pRHS) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_performance_timing_1_1_c_interval" kindref="compound">CInterval</ref> *</type>
          <declname>pLHS</declname>
        </param>
        <param>
          <type>const <ref refid="class_performance_timing_1_1_c_interval" kindref="compound">CInterval</ref> *</type>
          <declname>pRHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" line="809" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/Src/PerformanceTiming.h" bodystart="809" bodyend="812"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&lt; - stl predicate </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" line="808" column="1" bodyfile="F:/TeamWork/ServerVersion/projects/server/Server/Server/RaceServer/src/PerformanceTiming.h" bodystart="807" bodyend="813"/>
    <listofallmembers>
      <member refid="struct_performance_timing_1_1_pred___interval_by_order_1af4ba13975b049675372b15e9a0b774e7" prot="public" virt="non-virtual"><scope>PerformanceTiming::Pred_IntervalByOrder</scope><name>operator()</name></member>
      <member refid="struct_performance_timing_1_1_pred___interval_by_order_1af4ba13975b049675372b15e9a0b774e7" prot="public" virt="non-virtual"><scope>PerformanceTiming::Pred_IntervalByOrder</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
